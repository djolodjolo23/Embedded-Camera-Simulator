/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 20.02.2025 13:23:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038139177486300468, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 13084, -23397, -29095, -22748, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00035090549499727786, 0.00024100110749714077, 0.00019943692313972861, 0.00023678051366005093, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 7,-46,-65,-15,127,-12,20,-33,54,20,32,28,-88,2,22,-18,7,-72,-71,38,-15,31,-12,73,21,10,-17,-57,79,-48,31,4, 
  /* [1][0][][] */ 50,74,-84,-54,-55,42,114,43,-31,-89,-102,16,88,-66,36,-109,112,-127,20,-43,17,-88,-86,-20,-12,-86,69,-90,-72,-102,-31,-20, 
  /* [2][0][][] */ -56,121,20,106,-97,-7,98,37,-90,-127,103,-99,-101,96,-112,80,58,88,106,-126,-30,19,-32,-58,45,-34,92,-99,-54,21,76,74, 
  /* [3][0][][] */ 84,-80,85,6,-59,108,47,-6,-38,-93,23,80,73,-18,-111,-22,109,-126,88,-23,-127,-23,-12,-93,84,-30,-101,76,-96,113,35,60, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0049367891624569893, 0.0033905757591128349, 0.002805821131914854, 0.0033311974257230759, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 718, -484, -26, -441, 1607, 27, -220, -437, 647, 640, -287, 615, 286, -372, 12, -568, -187, 30, -373, 1115, 336, 180, 478, 1096, -22, -518, -454, -39, 989, 5, -358, -374, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.5976044677663594e-05, 4.6034198021516204e-05, 5.2439729188336059e-05, 4.5838041842216626e-05, 5.2411553042475134e-05, 5.237031655269675e-05, 4.1384188079973683e-05, 5.5658474593656138e-05, 4.6631641453132033e-05, 5.5036365665728226e-05, 4.9634465540293604e-05, 6.6012624301947653e-05, 4.3896572606172413e-05, 4.4657794205704704e-05, 5.313390283845365e-05, 5.209106529946439e-05, 4.2457650124561042e-05, 6.4386047597508878e-05, 4.5513919758377597e-05, 6.1517632275354117e-05, 5.1268882089061663e-05, 5.3170526371104643e-05, 7.1925031079445034e-05, 6.3883431721478701e-05, 4.3048043153248727e-05, 4.3642026867019013e-05, 4.7291585360653698e-05, 5.8337696827948093e-05, 6.5250424086116254e-05, 5.0945680413860828e-05, 4.6711389586562291e-05, 4.7877332690404728e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -78,-44,106,-18,48,-1,-56,-62,46,-61,-66,9,22,7,-9,27,-30,-23,-79,-36,-48,-69,18,101,-127,18,77,-25,91,-5,-2,-61,31,-59,-87,21,-62,-53,-68,29,66,-47,-69,96,55,-73,81,-4,5,-56,-87,91,-62,-45,-51,93,68,9,81,-92,-66,76,-29,39,-20,27,68,72,34,70,59,-77,71,-63,32,89,-77,28,-34,-28,50,6,67,3,-27,-14,-89,87,25,103,-13,-116,2,47,18,-16, 
  /* [1][0][][] */ -71,24,-86,-25,-30,64,29,7,65,-97,-99,89,67,-15,6,69,91,-35,68,127,-49,-17,22,4,33,1,-33,105,13,32,101,-24,71,103,-5,38,33,60,-5,-50,-57,17,-21,-106,-30,45,-25,-50,-16,-74,105,68,25,91,-74,-59,47,111,69,77,-34,97,-66,-61,-40,34,59,56,123,33,25,22,-101,101,-77,39,93,-60,-41,49,-64,89,-65,-90,27,110,-69,-47,70,80,78,74,96,68,26,28, 
  /* [2][0][][] */ 25,28,-44,74,-60,-51,64,70,-72,103,-50,47,87,-27,71,-127,-47,-25,65,36,-74,-13,92,16,-23,86,70,-1,-58,58,64,54,-67,-11,-93,-106,-71,72,80,-30,-99,-87,11,-5,-67,88,-32,-65,72,30,93,-81,-33,68,23,32,-92,60,-84,-6,-13,57,-23,91,106,25,38,95,-73,59,-24,-68,16,-52,48,10,-32,-18,-5,-7,21,-82,7,-38,-6,-107,-17,-46,77,95,-8,-29,-28,-64,-32,-50, 
  /* [3][0][][] */ 64,-14,21,-19,-69,-13,-108,34,58,31,63,-54,92,101,62,11,90,105,-8,65,117,-91,-71,-120,-3,-85,-74,100,55,-44,91,33,-34,-8,-2,-14,-109,-9,45,65,-16,-85,-86,-12,76,49,-32,-80,74,-52,106,34,109,73,98,-79,-127,-102,-116,-52,-65,25,-3,97,114,-25,-66,1,28,-57,-10,105,28,-62,53,-55,85,77,89,-78,-72,-88,52,123,30,38,-41,-91,-63,52,9,-71,127,-81,-52,65, 
  /* [4][0][][] */ 75,127,58,91,-26,-18,58,46,75,64,23,65,-69,-13,25,-35,7,10,-100,-17,75,-32,110,65,46,-11,76,-10,-48,-45,-45,-58,43,99,55,-36,13,0,-57,48,-29,-41,-30,-38,49,85,32,69,27,-81,-27,-89,-63,17,-76,16,25,-115,-15,50,-13,-42,-49,-96,-73,66,45,-53,-20,-51,-71,-93,-40,20,104,90,12,31,25,11,13,-34,-102,-35,27,80,95,-9,-106,-54,58,-7,13,106,-103,5, 
  /* [5][0][][] */ 38,-80,72,34,-55,-100,20,43,80,-85,-3,-69,20,75,33,-5,48,41,-83,86,29,40,9,-20,-127,-44,-22,-83,37,31,4,-85,-48,-10,-77,-2,-95,-31,33,9,-72,-47,28,83,-23,19,23,-43,-95,80,13,26,23,0,37,-10,92,16,-61,-58,28,-53,29,-59,-23,87,-25,14,52,-6,66,-63,-53,68,-25,-65,13,-43,8,50,87,24,26,81,-67,57,-16,34,57,-76,98,55,-16,23,62,-82, 
  /* [6][0][][] */ -24,-52,112,47,-112,-89,-2,70,-21,-70,9,-103,101,66,122,-122,42,8,20,127,-70,-126,107,59,-79,-76,-4,-54,-21,-85,57,-51,-83,-122,-53,-101,-16,48,-106,89,97,69,29,-17,-104,121,-86,-41,-84,29,-26,-51,66,-50,115,-15,42,-3,-76,106,-84,7,68,-56,-41,78,99,-38,100,2,-110,6,57,-57,-107,-45,-64,-114,-57,-63,48,-23,48,-14,-67,-89,-50,-82,96,111,96,43,-42,-69,86,-5, 
  /* [7][0][][] */ 64,41,-43,-55,-53,92,-21,-11,76,2,-79,11,54,-69,26,57,36,8,18,110,40,15,-16,57,-62,76,31,43,-54,127,-17,46,22,13,44,73,-90,64,-11,-21,71,-57,59,43,36,-3,75,-90,37,-31,-98,-38,-15,64,17,20,115,-62,11,-50,12,-17,73,-80,-31,-44,40,25,-59,16,53,70,65,24,29,38,-29,29,-83,12,74,-28,-26,-54,64,26,-97,81,62,4,62,74,-38,-51,0,-31, 
  /* [8][0][][] */ 54,39,-16,-56,56,35,-57,9,13,13,56,93,-29,-36,-58,-68,-57,85,-91,-2,20,-9,89,123,-99,91,45,77,-75,-24,-81,95,69,-16,58,3,124,8,-5,73,78,95,-95,-88,-3,-26,-19,105,15,-127,-66,-5,-72,14,-36,-101,34,77,-107,108,88,33,51,79,-32,-37,-4,89,-111,47,19,-12,67,67,16,36,-63,116,87,96,29,71,-112,-84,31,51,70,-47,27,-36,-85,72,-78,-84,-53,42, 
  /* [9][0][][] */ 22,33,101,68,111,2,-29,-87,53,50,2,80,-11,-48,-70,1,19,12,-77,-50,11,92,-66,-67,127,-1,-3,28,-6,-29,-63,72,49,14,36,10,-30,24,-20,-43,48,-49,55,-53,71,24,-66,51,52,3,-51,-39,74,-54,-62,87,59,-27,16,16,-64,95,80,-78,-45,14,96,23,-32,86,99,-70,22,65,-50,-61,-70,-70,-23,121,32,31,95,25,-25,-65,52,-4,85,32,-18,90,88,40,64,-33, 
  /* [10][0][][] */ -49,59,65,-66,12,43,93,27,36,6,13,-94,92,81,-35,9,-32,73,-44,-62,-8,24,44,-76,41,60,-102,-100,-28,23,-72,-86,84,95,124,64,-54,9,-12,43,-31,100,-88,-52,-82,-45,-2,-46,2,20,51,1,68,23,-44,-14,-127,-10,29,-44,16,78,92,57,100,-76,-87,6,51,-3,-89,-44,78,66,-71,84,-4,45,59,0,71,14,76,96,-91,47,92,-43,44,14,7,-90,-26,-32,-33,-28, 
  /* [11][0][][] */ 58,9,10,74,32,17,46,15,87,69,-35,84,-20,-30,27,-35,-29,-59,24,9,29,63,33,-55,-83,-66,6,64,52,-23,21,-50,-57,-59,12,9,-9,43,-32,-29,-17,73,-45,20,-24,-32,-67,-54,62,49,35,27,-59,-76,14,11,-32,-54,-35,-39,-47,63,45,-11,-20,71,-20,20,29,39,-51,-48,29,59,-73,59,-47,43,-15,64,-65,-1,-52,-28,42,-44,24,-10,-63,4,7,-127,-52,-62,-52,-43, 
  /* [12][0][][] */ -28,53,-26,-23,82,47,-28,28,-88,83,-12,74,-41,3,57,-90,-79,-51,-106,-69,30,-11,17,113,-100,-41,107,-100,105,27,-47,118,-108,-116,-78,-15,31,-76,-20,12,115,43,-127,-21,-19,-86,-47,116,-60,-111,-115,115,10,-56,-68,89,28,-90,63,51,59,118,10,44,96,44,-44,73,47,82,41,75,71,108,-9,-2,-29,44,-113,-101,-49,78,44,4,-29,50,21,125,-89,-99,85,42,93,-16,28,39, 
  /* [13][0][][] */ 98,-67,85,90,105,44,76,62,70,-120,-2,-60,102,75,52,-45,-115,-62,-27,25,62,-26,110,-71,-47,55,10,17,-59,-114,94,12,56,104,11,36,-101,-31,45,84,-68,73,-48,-20,-42,27,-6,-24,44,123,-22,-115,-84,23,97,-71,-93,40,0,-72,-17,127,-84,38,-45,-80,-89,112,11,-5,92,9,-78,51,-64,-47,-94,56,79,-77,50,-79,106,21,-86,-113,96,84,-4,-51,-64,23,124,-51,64,23, 
  /* [14][0][][] */ 1,-61,73,72,49,-33,-18,-58,-62,-27,54,62,2,-81,-70,-81,-51,-51,-13,1,-57,27,-2,50,-107,-56,-26,12,-112,-95,-49,14,107,-9,-12,2,76,92,49,-85,-5,-106,13,71,60,-109,50,-65,106,14,49,31,66,-12,-13,18,-58,55,27,70,-41,-64,-29,62,-70,-20,64,-64,-62,-40,-73,49,-11,72,60,-66,28,-86,39,127,34,-31,-88,-58,-96,-75,-103,63,80,-6,72,-58,49,96,-24,106, 
  /* [15][0][][] */ 30,-30,-21,59,91,-98,44,-84,52,-14,-67,-19,108,7,-85,-92,58,11,-46,21,35,12,54,74,80,64,33,81,14,43,64,-89,18,8,-48,-8,-76,89,85,-45,7,91,-32,-37,20,-62,-41,-72,-4,-63,-2,17,-65,-90,-47,-5,20,55,-53,87,-34,-60,-11,104,-41,73,-61,21,-42,26,41,-61,20,4,23,-91,4,35,84,61,-71,59,-87,-41,-107,-48,-70,24,68,54,-78,-38,49,86,-96,127, 
  /* [16][0][][] */ -116,-20,98,-103,-6,111,-54,31,43,57,-110,67,-6,-46,-50,-76,108,80,71,80,121,76,-48,54,-91,63,-63,62,-97,34,41,23,-114,64,41,32,-41,56,-55,-71,25,-44,69,89,68,107,102,-12,-65,-107,1,122,-47,107,82,57,49,82,56,-6,127,114,37,76,57,21,-42,96,49,98,-33,-5,23,103,52,80,-2,90,-110,-53,21,-87,63,12,14,100,90,20,84,23,-18,118,75,-31,-78,27, 
  /* [17][0][][] */ 35,-67,33,56,-9,-127,-38,-64,31,-80,56,3,81,51,-86,44,24,48,101,58,-72,2,20,-52,40,42,-39,42,74,-70,-5,39,3,1,44,16,-36,62,-48,5,-75,-24,-8,-31,-5,9,45,-74,76,64,-4,2,9,57,56,-67,-99,75,-52,-59,21,-63,38,97,-74,-64,41,-38,-60,6,71,22,21,-94,-50,59,86,-25,39,-50,2,9,-59,-50,-79,47,64,-42,11,50,-50,-94,-2,56,-8,45, 
  /* [18][0][][] */ -88,78,76,-85,-16,-112,-98,-11,-14,31,-103,-47,-32,26,37,-53,15,-24,52,-36,90,-49,16,-88,12,-104,-15,100,25,-11,-3,33,43,-32,-96,-112,-38,22,-40,63,-47,-1,-59,-24,-127,7,16,-11,13,-40,57,21,-104,-17,-13,65,-39,35,-15,-109,75,91,8,38,-85,-124,-33,89,59,-75,-62,103,-92,-55,-93,-103,49,48,-4,-90,-63,-8,-34,-66,87,-32,61,56,-107,-80,-77,91,78,-59,28,-18, 
  /* [19][0][][] */ 49,56,86,62,83,-19,90,93,91,-54,43,34,-72,36,-14,68,73,-64,69,16,-13,86,-7,35,109,-55,34,-32,-60,-127,-31,19,47,-47,40,29,41,-38,-26,-56,42,-64,-27,33,-44,27,63,-40,-14,10,-53,24,-13,9,2,-9,28,73,8,7,32,-12,72,21,-77,14,13,-1,-28,66,67,-26,-35,-90,-18,-27,-38,-42,34,119,47,-66,-24,54,-40,14,30,-5,64,30,12,23,-26,91,37,-26, 
  /* [20][0][][] */ 42,84,67,107,74,91,22,54,9,1,-54,40,-7,78,35,-6,-33,-24,-60,-34,13,-28,-43,-53,127,-69,-74,57,17,4,-23,118,100,50,2,90,60,-25,-13,-86,-66,-8,-66,-76,-24,-54,-47,92,64,-107,-114,36,52,90,33,-14,119,96,124,123,87,-51,-50,-36,-30,-54,-32,2,-72,-57,-18,75,-31,-87,27,42,88,88,97,123,71,12,57,-15,57,123,-2,66,11,73,15,111,14,21,-18,22, 
  /* [21][0][][] */ 113,65,62,-83,106,-76,60,27,-13,-57,-64,33,0,46,-38,-74,-74,-22,60,-13,85,-32,65,-70,74,-28,-28,63,37,-11,1,-49,20,19,-47,-78,98,79,-63,-13,-6,-4,36,-6,-77,-56,-61,81,-9,-17,44,60,44,44,-70,47,-97,30,-13,104,57,-37,24,7,65,22,-24,-43,-50,7,36,51,50,12,77,56,-77,-19,54,83,9,111,58,-60,18,-82,75,-78,-80,65,117,-127,-20,-41,85,-18, 
  /* [22][0][][] */ 13,-14,16,-42,57,-13,67,41,-53,59,-43,-49,58,-72,-61,-57,34,49,-43,-50,50,-30,40,29,56,2,-61,127,-38,-72,-34,-74,30,27,7,20,33,-14,-26,-68,1,-8,9,68,37,-73,51,-12,-31,-53,2,-23,-3,-68,-33,24,-23,-26,-24,-8,60,-43,-53,-65,-52,14,-52,-22,51,71,-7,-10,-36,2,47,-11,15,-3,44,83,63,-66,-40,-75,54,55,71,-23,-37,15,-8,21,5,24,-27,59, 
  /* [23][0][][] */ 60,-28,36,70,34,-57,20,-16,50,-58,90,65,-40,-67,37,-24,73,-26,-124,44,49,-35,89,18,10,-29,64,31,36,11,41,14,-42,28,24,62,104,-4,0,5,-59,7,9,-33,-34,-66,78,29,58,-111,-127,-36,39,-49,-42,43,-52,-47,55,52,-108,-76,-44,-54,21,55,-56,-92,-5,-16,75,-72,-13,-31,-19,-36,9,15,79,113,-32,-47,-18,-82,83,28,75,3,-74,25,76,16,50,-16,-39,31, 
  /* [24][0][][] */ -101,-54,-96,-80,-80,-117,-68,-104,69,119,79,49,93,64,-39,-124,-83,43,15,-60,95,-79,-58,-32,33,-49,79,57,103,51,-1,-68,-13,-8,40,13,-48,-96,41,-28,-76,-102,105,2,22,-41,34,70,-115,-51,-38,13,65,28,66,-78,-6,63,4,-2,93,-7,30,87,-111,98,-44,-98,-100,57,-64,-28,-47,28,82,101,63,-77,-105,-84,-78,-97,-68,-127,3,60,-19,-100,25,-109,13,-97,-21,32,-106,28, 
  /* [25][0][][] */ -54,-59,-84,-4,108,-47,-125,40,33,-88,-50,9,73,-17,-122,-38,-93,52,25,-64,57,65,-22,-68,-5,-50,-102,31,54,-101,37,118,89,-103,38,72,88,-73,-39,-36,-95,80,-104,-6,92,32,53,14,-108,93,29,2,33,33,-81,44,6,40,-124,60,106,35,58,43,50,63,-33,-13,-97,-2,-32,-125,27,-127,63,14,61,64,-7,34,26,39,-46,83,-85,-60,-112,-100,-40,-54,98,33,-123,120,-11,-106, 
  /* [26][0][][] */ 50,-105,-40,-26,-66,-6,-13,-12,-107,-127,108,85,-63,-30,-4,3,94,36,-42,-50,7,55,82,-1,54,38,26,54,10,22,-74,48,-4,-43,-82,-74,-70,83,-48,117,-83,114,55,14,-58,76,-26,96,-6,24,-26,106,30,-24,-9,-113,120,82,68,31,18,-105,58,-1,109,-9,-60,73,-61,81,96,105,75,-74,-107,9,53,-111,-86,-7,-13,77,52,-50,81,16,-46,38,-81,105,1,81,-41,95,37,116, 
  /* [27][0][][] */ -11,8,-34,-77,-127,-46,-55,-13,27,95,20,-73,-6,29,61,-54,53,-23,22,-57,-58,7,-25,-4,-95,43,-98,-10,55,37,-40,-25,38,33,-85,-75,-49,-54,-83,43,-70,6,17,24,70,15,44,75,57,62,52,-56,-70,-80,1,-16,52,-38,-71,-83,-40,-37,-27,33,39,-24,-84,57,28,10,-72,6,40,-37,2,-75,42,-47,58,79,59,-27,97,-54,-58,-79,-25,27,-30,0,5,-54,37,23,74,24, 
  /* [28][0][][] */ 127,27,79,85,-27,-39,-44,-19,-3,-74,66,53,-91,-37,18,80,72,79,-63,20,-19,41,-45,-27,-32,39,-43,-9,-60,-106,9,-16,-67,28,98,80,38,-64,-3,48,77,43,-44,53,-64,2,20,45,21,-56,-31,-34,-42,23,25,22,27,-7,41,73,-2,-34,-65,-25,16,60,15,55,-75,41,-69,-25,57,13,7,-32,-100,-8,-34,93,-51,-44,70,-15,55,-41,63,-60,-74,-47,-6,-59,-13,59,-85,-26, 
  /* [29][0][][] */ 33,39,54,-33,-100,4,-98,11,107,19,-86,-125,103,-97,-30,-70,-79,83,55,-53,-52,-23,46,11,-26,29,-53,-33,-81,-17,80,-15,21,5,-72,-64,-11,87,6,75,42,72,-31,71,5,86,-50,-16,0,-3,75,-81,63,-66,108,60,-127,23,-73,81,-94,94,-75,-9,-17,-56,48,99,88,-61,-4,-63,78,77,72,8,113,-51,-28,16,-7,-72,16,-66,50,70,35,59,-20,88,75,39,-68,24,11,52, 
  /* [30][0][][] */ 8,-84,-66,25,-98,29,-63,-37,97,-30,-11,-99,-92,-8,47,6,-7,28,85,-97,11,-98,-108,5,-121,19,-63,103,-19,-109,-100,-4,-94,-75,-108,-79,10,-24,-22,15,72,-83,-28,81,87,-59,85,42,-83,50,15,-95,85,-60,-16,85,-85,-51,-88,-68,-119,-8,-69,-36,-99,-100,-92,77,-58,79,43,-44,-103,88,32,-100,-57,-69,-79,-83,11,0,-105,-26,-110,20,-127,88,-48,-116,47,43,-50,-15,-7,-80, 
  /* [31][0][][] */ 58,-97,29,81,39,57,-55,-94,-34,-18,-81,-95,95,-111,-44,87,-57,-82,36,52,61,28,-35,91,34,-94,31,33,-58,-57,38,94,15,15,-77,-22,78,-27,-60,-104,51,-71,-32,22,5,-52,-41,22,61,33,90,-24,-100,-62,-66,30,-111,47,5,91,-31,4,82,-61,71,96,-45,-73,76,-119,-127,8,-104,-35,10,-4,-44,-51,43,71,-66,-45,61,57,46,78,-96,12,23,-44,-71,-56,15,102,4,-23, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023789817932993174, 0.0019564533140510321, 0.0022286884486675262, 0.0019481168128550053, 0.0022274910006672144, 0.0022257384844124317, 0.0017588279442861676, 0.0023654850665479898, 0.0019818446598947048, 0.0023390455171465874, 0.0021094647236168385, 0.0028055363800376654, 0.0018656043102964759, 0.0018979562446475029, 0.0022581908851861954, 0.0022138701751828194, 0.0018044500611722469, 0.0027364068664610386, 0.0019343415042385459, 0.0026144993025809526, 0.0021789274178445339, 0.0022597473580390215, 0.0030568137299269438, 0.0027150458190590143, 0.001829541870392859, 0.0018547860672697425, 0.0020098923705518246, 0.0024793520569801331, 0.0027731428854167461, 0.0021651913411915302, 0.0019852339755743742, 0.0020347866229712963, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1648, 3538, 6263, 2662, -3690, -3205, 17320, 2349, 2651, -1002, 7728, -76, -5670, 2260, 11734, 7451, 13260, 5816, -4508, -3294, 4720, 24397, 15761, 11548, 1083, 896, 5204, 2543, 1840, -4739, 5592, -2728, -188, 3062, 127, 1076, 8265, 5582, -2199, 4818, 9109, 3907, 5027, 11406, 3936, 4924, 2022, 9676, 4672, -5067, -5063, 480, -341, -928, 1988, 99, 210, -574, -4501, 8963, -940, 1181, -1218, -2328, -2583, 8091, 27111, 1636, -2086, 866, 1227, 1646, 1556, -989, 449, 8402, -512, 16062, 13777, -177, 7079, 2108, -395, 1006, 15672, 6469, 2967, 1314, 4354, 5178, -404, -7346, 669, -1832, -1980, -2677, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00036424532299861312, 0.00045201540342532098, 0.000386063038604334, 0.00036228547105565667, 0.00029418687336146832, 0.00046204825048334897, 0.00019085407257080078, 0.00029811763670295477, 0.00024555402342230082, 0.00064902618760243058, 0.00025830883532762527, 0.00034059182507917285, 0.00044473304296843708, 0.0012276986381039023, 0.00026209501083940268, 0.00016331473307218403, 0.00014004878175910562, 0.00024554147967137396, 0.00042233592830598354, 0.00049924739869311452, 0.00013166590360924602, 0.00011059038661187515, 0.00019429149688221514, 0.00014586836914531887, 0.00025088933762162924, 0.00054038671078160405, 0.00059531134320423007, 0.00042476522503420711, 0.00028000774909742177, 0.00040694099152460694, 0.00025673536583781242, 0.00028921061311848462, 0.00019237252126913518, 0.0003778116952162236, 0.00037210935261100531, 0.00023110775509849191, 0.00023400943609885871, 0.00018773687770590186, 0.000300251180306077, 0.00036059485864825547, 0.00014276578440330923, 0.00065019854810088873, 0.00029034362523816526, 0.00020243646577000618, 0.00048084536683745682, 0.00020244302868377417, 0.00025869248202070594, 0.00022623979020863771, 0.00029401711071841419, 0.00025312873185612261, 0.00030110037187114358, 0.00022520114725921303, 0.00063639448489993811, 0.00033623160561546683, 0.0003812164650298655, 0.00038364139618352056, 0.00070744939148426056, 0.00046177842887118459, 0.0003406108298804611, 0.00020822805527132004, 0.00082830345490947366, 0.00054660358000546694, 0.00024245979147963226, 0.00035210148780606687, 0.00072385830571874976, 0.00023836269974708557, 8.0117381003219634e-05, 0.00022995406470727175, 0.0005558492848649621, 0.00040522814379073679, 0.00034556013997644186, 0.00030745952972210944, 0.00086315179942175746, 0.00041988742304965854, 0.00038271886296570301, 0.00025639258092269301, 0.00030430665356107056, 0.00011584563617361709, 0.00013273545482661575, 0.00025656158686615527, 0.0002079560945276171, 0.00015892935334704816, 0.0002147416234947741, 0.00021866579481866211, 0.00011627285130089149, 0.00037241028621792793, 0.00082816422218456864, 0.00020346743986010551, 0.00015660941426176578, 0.0003945568751078099, 0.00030044314917176962, 0.00026277289725840092, 0.0002894324716180563, 0.00057093228679150343, 0.00032297096913680434, 0.00017498158558737487, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -8,127,-15,-114,-53,-45,-47,-56,-21,-5,15,94,19,-62,-5,68, 
  /* [1][0][][] */ -28,25,-41,19,-28,-14,31,-78,82,33,-54,51,20,-7,21,-127, 
  /* [2][0][][] */ 16,-13,-11,49,44,-7,-68,-80,127,-25,10,15,-35,82,-58,9, 
  /* [3][0][][] */ 13,-30,21,-85,-8,3,-29,-4,116,-2,107,60,-41,72,17,127, 
  /* [4][0][][] */ -91,59,42,17,65,-37,20,44,-19,7,11,-22,-127,-52,-53,33, 
  /* [5][0][][] */ 11,53,119,-38,18,63,-80,93,-95,127,-17,-45,26,-23,-114,13, 
  /* [6][0][][] */ 26,-13,106,-119,22,21,-33,116,-77,-114,59,-2,-14,127,9,80, 
  /* [7][0][][] */ 39,91,-12,-57,100,2,7,-58,127,98,-30,14,23,-29,59,37, 
  /* [8][0][][] */ 6,-74,17,-64,39,-42,12,-85,31,23,82,-16,12,127,68,42, 
  /* [9][0][][] */ 21,-36,7,127,30,-6,27,-38,-52,68,12,-10,6,-43,-18,-17, 
  /* [10][0][][] */ -28,24,-44,-127,-13,25,-14,54,44,-22,24,-2,-31,-24,-7,29, 
  /* [11][0][][] */ -19,38,19,-40,77,-14,86,-39,-86,40,6,0,-17,127,-79,-26, 
  /* [12][0][][] */ 62,4,-112,-23,-10,-83,8,24,12,-2,-45,-20,-24,127,4,50, 
  /* [13][0][][] */ -27,24,-36,11,2,-127,-6,25,-9,-17,14,-7,-4,-2,28,12, 
  /* [14][0][][] */ 26,-31,106,-17,71,2,-127,-101,-31,-19,6,-11,9,-60,-19,-45, 
  /* [15][0][][] */ -117,112,-32,-105,11,12,62,69,-127,45,51,-45,-7,67,125,10, 
  /* [16][0][][] */ -31,85,127,55,2,6,86,88,-115,66,-68,-61,-32,23,24,-80, 
  /* [17][0][][] */ -39,-119,-11,36,-81,-38,-78,13,-127,-48,18,-56,7,37,72,-21, 
  /* [18][0][][] */ 31,88,-30,85,77,-11,-16,-16,70,-33,-61,-69,14,124,127,44, 
  /* [19][0][][] */ -10,-9,29,-11,75,-8,-58,-31,-18,-25,-10,-127,-11,-26,17,-2, 
  /* [20][0][][] */ 66,-78,-70,-103,40,-127,52,16,-100,65,-86,-39,10,12,1,2, 
  /* [21][0][][] */ 64,-55,46,-21,-3,9,36,99,-12,-62,60,67,3,127,30,54, 
  /* [22][0][][] */ -21,52,-17,127,-36,1,50,50,0,12,-6,15,-1,21,33,8, 
  /* [23][0][][] */ 49,-33,93,-67,48,-2,-10,24,16,39,1,-29,4,-12,-127,14, 
  /* [24][0][][] */ -127,68,28,-4,17,103,13,-38,-25,2,103,-39,-88,4,56,-47, 
  /* [25][0][][] */ 35,36,14,25,4,-4,39,-36,-6,-127,-5,-15,-12,-16,32,27, 
  /* [26][0][][] */ -47,2,0,7,-43,-7,-40,-40,-114,-32,-9,-43,23,127,-51,67, 
  /* [27][0][][] */ -9,43,3,60,31,-36,-15,-33,55,7,-19,1,3,127,4,11, 
  /* [28][0][][] */ -13,62,34,51,127,2,35,33,-80,0,-50,-52,-11,84,15,-33, 
  /* [29][0][][] */ 43,-65,12,27,60,-1,46,-8,21,-54,-21,-127,56,-69,-32,-30, 
  /* [30][0][][] */ -17,101,-38,90,-33,-23,32,-127,-42,40,-27,-15,58,39,85,94, 
  /* [31][0][][] */ -57,-8,6,-103,-8,24,-28,-64,5,87,-5,-127,-73,-26,-8,0, 
  /* [32][0][][] */ -127,-90,-7,77,52,44,-16,1,2,-50,-99,53,93,-3,62,51, 
  /* [33][0][][] */ -6,-13,-46,18,-86,-7,-76,-1,52,-10,7,-35,30,-91,127,26, 
  /* [34][0][][] */ 44,-20,58,-2,48,9,-41,64,-76,-37,73,31,16,-8,-13,127, 
  /* [35][0][][] */ -70,83,-101,24,-38,4,27,-115,101,115,-98,30,-23,8,93,-127, 
  /* [36][0][][] */ -30,17,3,49,15,35,127,40,17,63,-11,20,-46,26,-111,-34, 
  /* [37][0][][] */ -14,17,3,-68,-11,-35,-92,-50,-102,-50,17,-39,4,-127,127,-28, 
  /* [38][0][][] */ 48,103,16,-49,125,-7,44,-21,127,59,-21,2,32,-14,67,25, 
  /* [39][0][][] */ -26,92,2,-127,-15,18,-64,47,61,-114,-38,-17,22,94,65,42, 
  /* [40][0][][] */ 13,-40,32,-92,11,-6,10,-50,-118,24,-16,-27,2,-127,62,-61, 
  /* [41][0][][] */ -14,4,-30,-11,4,-37,6,-7,-29,4,-36,-16,-127,13,34,33, 
  /* [42][0][][] */ 114,38,-30,-38,-61,-49,-15,-54,-4,32,81,-62,-41,50,127,-111, 
  /* [43][0][][] */ -1,58,-49,21,74,-25,106,-36,40,69,-54,-23,29,-127,-103,-49, 
  /* [44][0][][] */ -13,-50,5,-46,38,3,-53,-127,-3,-4,26,1,15,-31,42,-44, 
  /* [45][0][][] */ -11,37,-127,-26,29,-116,-16,-80,12,25,4,-114,50,-22,86,-8, 
  /* [46][0][][] */ 9,-6,-13,-95,-2,11,20,-34,-110,-9,11,9,-15,-127,61,-21, 
  /* [47][0][][] */ 20,39,26,-23,127,0,-14,11,-47,49,3,34,-3,-6,94,-33, 
  /* [48][0][][] */ -127,-76,-24,50,56,22,20,-13,24,-9,-89,50,88,10,82,50, 
  /* [49][0][][] */ 34,4,70,108,111,-15,36,36,-117,-106,-63,-65,29,127,92,-60, 
  /* [50][0][][] */ 40,-45,-86,-21,31,-127,-55,5,42,-33,-20,-71,85,-39,-21,26, 
  /* [51][0][][] */ -23,36,40,0,19,5,-3,22,-127,77,7,-122,-14,-90,-32,81, 
  /* [52][0][][] */ 0,53,-10,63,20,-2,10,21,62,77,-27,-50,15,127,105,19, 
  /* [53][0][][] */ -32,-20,-16,-23,-85,-11,-94,14,40,21,9,-74,19,-118,127,20, 
  /* [54][0][][] */ 35,-16,-39,2,127,41,-89,-40,-79,-4,-20,-88,-18,-28,15,-34, 
  /* [55][0][][] */ 59,-16,14,42,51,-35,-49,-127,-27,-99,-73,3,14,-28,-7,-22, 
  /* [56][0][][] */ -7,6,27,-20,-14,-12,-80,54,-11,127,-2,19,24,6,0,-1, 
  /* [57][0][][] */ 2,41,-27,-1,-44,-40,55,72,-21,-7,-23,-3,16,26,127,2, 
  /* [58][0][][] */ 15,9,-102,-26,127,75,-29,46,-118,-1,25,-14,-74,22,-11,-16, 
  /* [59][0][][] */ -109,90,127,11,-82,-56,123,106,30,21,39,-11,1,-16,64,-6, 
  /* [60][0][][] */ 3,-2,-57,-13,20,-127,-28,-6,-33,0,-2,-26,12,-24,-9,5, 
  /* [61][0][][] */ 27,-23,36,127,107,-2,32,-11,-109,-10,15,27,8,14,48,-47, 
  /* [62][0][][] */ -58,127,3,-63,-15,-15,-54,44,-34,-33,-70,-64,-29,-86,-56,-27, 
  /* [63][0][][] */ -38,42,-27,127,-83,18,-68,-30,-68,-34,-34,-48,20,51,38,55, 
  /* [64][0][][] */ 9,-7,20,33,12,0,-8,52,33,-6,-7,-57,5,-127,34,-2, 
  /* [65][0][][] */ -20,-57,23,-116,47,-16,65,-42,-5,63,3,-127,-9,5,-18,-73, 
  /* [66][0][][] */ 20,-64,78,-4,0,20,-33,107,14,-54,66,39,30,127,31,93, 
  /* [67][0][][] */ 6,64,-12,-127,-4,13,-75,57,94,-123,-53,-18,26,84,75,37, 
  /* [68][0][][] */ -29,39,127,39,14,13,-14,5,-37,-38,-36,-35,14,-16,86,-35, 
  /* [69][0][][] */ 127,95,8,13,-93,-25,-22,-64,-14,22,86,-66,-79,74,14,-107, 
  /* [70][0][][] */ 29,5,-60,-32,-20,11,56,127,-31,74,-23,-5,14,56,-20,50, 
  /* [71][0][][] */ -5,7,-7,-2,7,-78,-2,19,-50,26,-72,-7,-127,-5,38,38, 
  /* [72][0][][] */ 19,34,-127,33,21,17,26,91,-49,-41,4,-24,21,7,-13,14, 
  /* [73][0][][] */ -36,6,45,17,57,-36,-57,-127,23,-93,29,-25,40,-49,19,-25, 
  /* [74][0][][] */ 13,-15,35,120,5,-6,-64,70,-34,0,-46,56,33,-127,-8,-72, 
  /* [75][0][][] */ -23,60,-34,27,19,-16,-4,-9,66,3,-14,-12,1,127,-14,17, 
  /* [76][0][][] */ -10,-16,-2,9,1,-13,-14,66,27,-22,-10,-127,-9,-8,10,17, 
  /* [77][0][][] */ -27,50,8,127,-65,20,75,95,6,13,-18,36,-16,-28,-53,39, 
  /* [78][0][][] */ 5,28,10,-91,29,-12,-27,53,43,-82,18,-11,30,127,51,48, 
  /* [79][0][][] */ -30,-53,-72,-34,-62,-9,8,-102,127,23,40,66,15,49,57,-60, 
  /* [80][0][][] */ -8,-11,127,-66,44,-13,19,-105,-56,35,-58,-90,33,98,100,-80, 
  /* [81][0][][] */ -51,57,-127,12,74,-114,-20,51,-24,-33,57,-12,6,2,5,-9, 
  /* [82][0][][] */ 127,-7,-2,15,45,-121,-6,16,-29,-13,-122,-19,100,3,-1,12, 
  /* [83][0][][] */ -31,57,-121,-103,-31,-22,53,-114,47,46,-58,-127,25,62,63,121, 
  /* [84][0][][] */ -72,18,89,-76,-19,-6,89,-127,-30,108,1,-61,13,44,47,-16, 
  /* [85][0][][] */ -83,122,37,-127,-60,-41,-39,-5,-62,2,-62,-4,-9,-14,-72,-17, 
  /* [86][0][][] */ 9,-4,-20,3,-22,-30,127,26,6,-34,7,25,32,14,49,-24, 
  /* [87][0][][] */ -22,-50,22,-127,18,-27,69,-4,-5,30,-16,-124,-26,15,-17,-50, 
  /* [88][0][][] */ 83,-19,27,-5,25,-115,-14,6,-65,44,-115,-84,19,30,127,5, 
  /* [89][0][][] */ 24,13,-52,-56,34,-22,-42,5,-90,3,35,-102,127,13,77,-52, 
  /* [90][0][][] */ -3,-41,49,-46,60,8,-77,97,66,-84,-49,-34,-27,127,14,-121, 
  /* [91][0][][] */ -37,-10,5,-71,44,-12,-10,-75,-17,30,-18,-127,-46,-19,-38,-5, 
  /* [92][0][][] */ -48,24,48,11,16,-127,15,8,-8,-21,-6,-34,-9,-23,15,11, 
  /* [93][0][][] */ 35,-33,127,-34,-42,62,39,-50,-18,36,-59,-17,-38,-11,25,-7, 
  /* [94][0][][] */ 31,2,-16,-37,76,23,-2,9,-53,-27,-7,-77,127,-28,38,-59, 
  /* [95][0][][] */ 127,123,39,37,-125,9,-107,7,38,-20,121,-52,-96,35,81,-87, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00091418094234541059, 0.001134465797804296, 0.00096893886802718043, 0.00090926210395991802, 0.00073834863724187016, 0.0011596461990848184, 0.0004790044913534075, 0.0007482140208594501, 0.0006162901408970356, 0.0016289224149659276, 0.00064830208430066705, 0.00085481553105637431, 0.0011161885922774673, 0.0030812711920589209, 0.00065780460136011243, 0.00040988641558215022, 0.00035149368341080844, 0.00061625865055248141, 0.0010599764063954353, 0.0012530083768069744, 0.00033045434975065291, 0.00027755915652960539, 0.00048763173981569707, 0.00036609964445233345, 0.00062968069687485695, 0.0013562595704570413, 0.0014941091649234295, 0.0010660734260454774, 0.00070276192855089903, 0.0010213382774963975, 0.00064435298554599285, 0.0007258591940626502, 0.0004828154924325645, 0.000948229746427387, 0.00093391799600794911, 0.00058003299636766315, 0.00058731558965519071, 0.00047118097427301109, 0.00075356877641752362, 0.0009050189983099699, 0.00035831279819831252, 0.0016318646958097816, 0.00072870287112891674, 0.0005080739501863718, 0.0012068230425938964, 0.00050809042295441031, 0.00064926501363515854, 0.00056781538296490908, 0.00073792255716398358, 0.00063530111219733953, 0.00075570004992187023, 0.00056520861107856035, 0.0015972193796187639, 0.00084387225797399879, 0.0009567749802954495, 0.00096286105690523982, 0.0017755526350811124, 0.0011589690111577511, 0.00085486320313066244, 0.0005226096254773438, 0.0020788714755326509, 0.0013718627160415053, 0.00060852424940094352, 0.00088370236335322261, 0.001816735602915287, 0.00059824140043929219, 0.00020107816089875996, 0.00057713745627552271, 0.0013950675493106246, 0.0010170394089072943, 0.00086728495080024004, 0.00077166024129837751, 0.0021663336083292961, 0.0010538311908021569, 0.00096054573077708483, 0.0006434926763176918, 0.00076374714262783527, 0.00029074875055812299, 0.00033313871244899929, 0.00064391689375042915, 0.00052192708244547248, 0.00039888001629151404, 0.00053895736346021295, 0.00054880621610209346, 0.00029182096477597952, 0.00093467329861596227, 0.0020785219967365265, 0.00051066145533695817, 0.00039305744576267898, 0.000990256667137146, 0.00075405056122690439, 0.00065950595308095217, 0.00072641606675460935, 0.0014329227851703763, 0.0008105907472781837, 0.00043916783761233091, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -2383, 13982, -6935, 7455, 3989, 13250, 33713, -47781, -529, 18896, 19907, 16204, -8570, 5526, -28627, 6491, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00089206080883741379, 0.00045326200779527426, 0.00024460788699798286, 0.00039721745997667313, 0.00038747661164961755, 0.00037747682654298842, 0.00038585986476391554, 0.00034832474193535745, 0.0003998819156549871, 0.00026536110090091825, 0.00061037804698571563, 0.00066769932163879275, 0.00034452756517566741, 0.00028809797368012369, 0.00046894082333892584, 0.00050642987480387092, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -25,-23,5,-37,8,-1,-42,3,-1,-15,3,-10,-7,-8,-32,11,1,8,-12,-3,13,-13,0,12,-19,-6,3,127,49,-34,53,-24,8,-5,2,21,-6,11,-40,-5,-36,13,-15,13,-3,18,8,-8,48,18,-24,19,32,-28,-17,52,25,12,-7,-50,-11,24,-2,-16,-40,-50,-11,36,9,21,33,-19,-14,-20,-7,-13,-36,11,-3,-1,-14,-34,21,20,-5,1,-17,-102,21,-21,-3,-9,58,-31,-29,-24, 
  /* [1][0][][] */ 32,-63,-71,-68,115,-15,68,35,-33,-40,-46,-43,-7,-18,-55,17,-61,5,41,31,37,-20,-1,-90,-5,-5,-46,-75,22,-36,-70,24,-9,20,12,5,-18,-8,-20,62,-55,43,-50,14,-4,127,16,5,10,-60,0,-54,6,24,15,43,-73,-22,-8,-38,15,2,12,-58,-69,108,-23,-37,-35,-23,-9,21,55,-104,-45,6,56,-77,47,36,-14,-21,26,12,-65,51,-24,-12,9,-35,20,29,21,32,0,122, 
  /* [2][0][][] */ -9,37,-73,19,58,65,15,48,-3,-127,22,15,15,-21,20,27,23,-12,-41,57,-30,-17,56,-3,32,58,36,-20,23,-2,70,-82,9,25,-26,38,-83,-92,15,-12,23,-46,19,-21,-7,-44,-5,59,11,30,-24,12,72,-14,-40,23,48,29,24,16,-1,2,29,6,1,-9,0,1,-35,-13,-32,-35,-30,-83,23,69,25,57,32,-19,17,-31,7,-10,-28,20,48,34,27,38,3,-62,-3,-49,-62,20, 
  /* [3][0][][] */ 44,-10,95,-22,7,-17,2,-1,-21,-44,-6,-79,-14,3,44,85,23,23,-8,3,127,34,12,72,5,-76,-2,3,67,0,-24,76,-62,6,5,25,15,-2,-19,33,-110,-4,35,-53,-1,26,-9,-79,-32,0,-14,34,-35,-80,2,-19,-68,41,52,3,8,75,2,-33,51,65,4,-40,9,25,24,-71,23,9,9,-17,6,8,51,49,-8,-98,8,-6,-34,-13,-18,17,22,-23,1,44,38,83,37,-47, 
  /* [4][0][][] */ 47,-21,17,-5,125,48,-28,-45,-68,-120,-14,-72,-58,4,-2,70,55,-72,-52,111,-29,12,44,-9,-4,-27,-5,-54,34,-36,68,-83,123,-7,-63,44,87,25,-14,-19,-68,-6,-64,-52,-36,-76,-8,3,70,34,-52,23,-14,-74,-49,-73,86,-6,2,25,-37,54,53,47,65,49,-4,-24,-66,29,66,78,31,-74,-25,-23,6,42,127,-47,-7,-79,-5,-7,-105,16,-2,44,-22,19,-24,-74,6,-7,42,6, 
  /* [5][0][][] */ 5,-24,10,5,19,7,27,-30,-4,-32,-23,13,8,32,2,5,-13,4,19,8,11,34,-38,70,35,-13,48,-87,-10,35,19,19,-1,21,3,-39,38,13,20,-12,14,-20,46,-21,-27,-11,5,-5,-2,-28,23,1,-24,-16,2,-60,-14,37,-39,17,46,13,-15,40,-6,38,-2,66,21,77,7,31,-2,11,16,62,-60,4,19,15,-11,-24,16,28,-5,-8,-28,127,-4,21,-9,-47,8,11,-20,19, 
  /* [6][0][][] */ 35,-93,4,-45,-26,24,28,32,-2,2,-55,-63,-45,27,-36,26,-9,-16,0,7,-38,42,14,1,12,-7,-17,-8,-37,17,41,-9,67,9,49,-13,13,0,47,-102,-19,81,18,-30,8,-57,-14,7,-27,20,-3,47,-21,-41,13,-15,-4,-56,-35,-4,7,47,0,-77,26,-44,-5,-26,3,2,127,10,-54,-4,-16,14,-100,-3,11,-7,24,27,17,-12,-14,-6,25,29,-6,-8,34,-54,-1,-18,2,-26, 
  /* [7][0][][] */ -10,127,17,17,98,42,45,-13,-10,1,27,-20,-46,28,6,-13,7,-35,-12,27,46,-88,35,-24,32,-16,10,17,-8,-4,-1,-15,37,-10,-28,-17,11,18,-20,83,-28,14,15,59,20,7,18,6,-45,-25,21,-11,36,-39,-60,68,2,-8,-38,-3,-12,-24,-7,-11,-44,65,-39,-98,-28,-61,-5,68,5,-30,-12,-20,64,65,14,-13,-52,-20,-16,5,11,48,28,-9,-30,11,-19,-19,-53,5,2,-6, 
  /* [8][0][][] */ -27,-3,71,24,-100,-34,48,-21,33,91,16,46,0,35,21,11,-50,14,19,-15,-31,11,-109,77,48,-15,82,-29,6,19,-13,60,21,-17,-5,-48,-49,-16,52,37,40,-22,59,-21,-46,-19,26,4,-127,-12,41,32,-75,1,7,50,-34,-56,-127,-26,48,-30,-55,-6,-6,62,-11,-64,43,-9,-38,-11,22,53,50,-2,-35,-25,-27,8,-81,36,-12,8,48,-4,67,81,-2,-41,37,47,14,14,41,-8, 
  /* [9][0][][] */ -9,-79,-75,29,83,80,-59,-55,55,-79,104,127,13,33,84,-83,11,-45,4,-20,-61,-77,46,-70,-5,53,12,32,-35,4,16,25,6,7,-88,-7,-1,-6,6,11,98,-80,-4,124,24,-39,-71,20,9,48,-12,-67,89,18,-56,-78,34,101,-1,17,16,-46,-42,126,-107,-26,18,18,3,-24,-81,-73,56,-50,8,20,49,-112,16,22,-3,-18,10,-5,18,-49,59,6,-10,-3,-49,-11,-74,-58,6,29, 
  /* [10][0][][] */ -60,-24,-33,-49,-9,29,82,-19,56,43,7,51,40,-2,1,-19,-15,22,-19,-21,-20,18,27,22,6,22,13,-127,8,-35,84,-48,-11,27,11,-6,4,28,12,-15,34,-40,47,-36,18,-19,26,37,-9,39,-28,-15,-49,-31,3,-33,7,45,-23,-25,31,7,-15,20,-43,88,-37,-23,16,-26,2,-10,-42,-22,39,54,-14,57,-34,15,-15,-9,26,34,24,-9,12,126,-9,19,14,-12,27,-52,57,-29, 
  /* [11][0][][] */ -88,18,5,5,12,-47,-7,7,-25,12,-38,39,36,31,-22,7,32,-4,-69,-55,0,12,-15,12,98,17,85,6,-38,35,-34,36,-31,39,-1,-26,-7,-5,51,-1,19,-16,48,-14,77,-20,71,27,29,10,-1,32,-15,-45,37,-14,-83,6,-62,-28,8,-23,-24,21,-13,-34,9,-2,28,0,-9,28,-35,-1,36,0,-38,80,-115,63,-26,-18,-53,-70,127,1,60,15,-20,46,-32,-74,-18,27,4,-19, 
  /* [12][0][][] */ -13,-24,-36,-17,89,-30,1,-19,-69,21,23,-45,21,-37,28,-3,-44,7,22,-37,0,16,-57,79,-31,30,-16,124,32,38,-45,14,-43,52,15,45,19,-51,48,8,-51,4,-15,-88,-82,-25,35,14,26,4,33,-6,-52,8,-19,-45,0,-45,16,-12,-8,-17,1,73,109,-94,12,67,-35,-125,27,71,-44,13,-1,127,6,-6,18,-4,-9,-32,-95,30,3,-31,-29,-82,6,-33,-49,4,-12,50,-48,-14, 
  /* [13][0][][] */ -67,79,-9,-41,-55,11,-24,23,-53,16,6,14,80,15,-32,-4,-52,30,-8,-44,78,-45,76,-104,29,-6,-20,-13,-29,-10,-46,-78,-127,-25,10,-41,-64,42,50,14,-12,103,41,60,68,71,-3,-10,44,-36,49,54,88,-43,86,10,-73,51,7,12,31,39,-9,-6,-2,-8,7,11,1,26,27,-109,-1,-35,-92,-12,81,44,-70,-26,82,28,24,-3,52,-35,117,31,-55,7,4,68,52,17,-5,23, 
  /* [14][0][][] */ -28,53,-11,-78,43,-24,16,50,-126,53,5,-15,-54,-62,-71,-41,-100,2,72,16,63,-19,1,-77,-35,-31,-96,-27,19,-36,-29,-24,-77,-36,30,20,-53,-4,12,40,-49,103,-61,-21,-66,85,34,-8,127,-26,41,-8,33,73,-90,49,-53,7,-100,5,13,77,82,1,49,60,-18,8,-59,77,85,19,35,-16,-57,13,92,-60,-26,-54,17,-5,11,60,25,-81,-73,19,-62,24,48,125,20,94,-44,-35, 
  /* [15][0][][] */ -45,-70,15,-31,1,28,5,-60,-13,50,-21,-18,29,-13,42,-28,-90,-10,-25,14,12,7,-63,-27,-4,-32,-6,6,-27,-6,50,-74,-23,15,27,-3,-41,34,-78,24,42,-60,11,17,-7,-7,42,32,29,5,-3,-127,-1,46,12,50,4,-3,-25,35,11,9,51,-12,-15,-10,-13,-13,-22,26,11,35,-39,7,-2,-38,-24,-1,-3,7,4,68,13,65,-3,-36,-23,-19,-61,50,42,97,-30,17,-8,-23, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.037912584841251373, 0.019263634458184242, 0.010395835153758526, 0.016881741583347321, 0.016467755660414696, 0.016042765229940414, 0.016399044543504715, 0.014803801663219929, 0.016994981095194817, 0.011277846060693264, 0.025941066443920135, 0.028377220034599304, 0.014642421156167984, 0.012244163081049919, 0.019929984584450722, 0.021523268893361092, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 27323, 56134, -4214, -1602, 14694, -9827, -1892, 261, 3490, 15154, -4010, 157, 96, -149, 4823, -11329, -3656, -500, -1056, 13273, -11699, 17516, -2273, 13464, 22510, -872, -770, 18310, 17375, -19567, 2539, 22760, 27475, -11976, 1896, -289, 473, 697, 5851, -9023, -4058, 6, -3522, -1092, 32227, -1281, 13188, -2999, -15602, 1999, -413, 524, -1843, 20588, -3505, 14322, 18074, 86, 43653, -677, -9486, -1062, -1529, 403, -4333, 13630, -1551, -8899, -2054, 1597, -269, -3428, 3628, 714, -2045, -4827, -789, -1594, 40456, -10267, -6838, -9844, -1640, 425, 49817, -13527, -11908, -28605, -4937, 8757, -493, 30140, -825, -4891, -1509, -64, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 8.3350176282692701e-05, 0.00010093738092109561, 0.00010801175085362047, 0.00021139050659257919, 0.00025507961981929839, 8.3601888036355376e-05, 4.2683146602939814e-05, 8.4161467384546995e-05, 0.00024474132806062698, 0.00015456830442417413, 0.00023992727801669389, 0.00010680205014068633, 0.00031849503284320235, 0.00018472154624760151, 0.00036635692231357098, 0.00012484344188123941, 0.00021048483904451132, 0.00018547172658145428, 0.0002354797616135329, 0.00010018557077273726, 8.6275162175297737e-05, 5.5934346164576709e-05, 0.00014096053200773895, 5.6356322602368891e-05, 8.1147169112227857e-05, 0.00011211170203750953, 0.00014093141362536699, 0.00016670889453962445, 8.0814956163521856e-05, 0.00050662877038121223, 0.00037567218532785773, 0.0002438417577650398, 0.00011388103303033859, 0.00012649266864173114, 0.00022512604482471943, 0.00042120806756429374, 0.00057877955259755254, 0.00019907719979528338, 0.00020760376355610788, 7.6674041338264942e-05, 0.00021866592578589916, 0.00020141284039709717, 0.0004602307453751564, 8.5523948655463755e-05, 0.00032428445410914719, 0.00011202406312804669, 9.147379023488611e-05, 0.00033682625507935882, 0.00055106228683143854, 0.00011631551024038345, 0.00060358527116477489, 0.00015750015154480934, 0.00027569499798119068, 0.00013473440776579082, 0.00024960513110272586, 0.00011779064516304061, 0.00015838592662476003, 0.00045008744928054512, 4.2750332795549184e-05, 0.0001732007076498121, 0.00028088802355341613, 0.00032644826569594443, 0.00014259610907174647, 0.0001479690836276859, 0.00012126759975217283, 0.00011592968803597614, 0.00036881724372506142, 0.00023672118550166488, 0.00021809551981277764, 0.00017715213471092284, 0.00020394402963574976, 9.9813252745661885e-05, 0.00033070269273594022, 0.00014484151324722916, 0.00039763140375725925, 0.00037905856152065098, 0.00016663481073919684, 7.8807308454997838e-05, 6.4417588873766363e-05, 0.00012682155647780746, 0.00021329712762963027, 0.00022003293270245194, 0.00016725143359508365, 0.00031779793789610267, 6.7118256993126124e-05, 0.00012841129500884563, 7.5144933362025768e-05, 0.00045802423846907914, 0.00027004623552784324, 0.00013244182628113776, 0.00045056839007884264, 4.0528204408474267e-05, 0.00014877313515171409, 0.00010732284135883674, 0.00044616879313252866, 0.0003137676976621151, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -50,-69,-3,127,22,76,79,-59,-12,-24,-16,-7,-26,0,37,2,-12,-45,25,21,25,-127,127,11,-76,4,47,-28,-125,-127,37,28,11,34,62,-16,-28,-14,24,-4,-17,28,-119,74,22,-69,31,47,-19,51,-24,16,11,-7,20,45,-93,-49,-71,-19,-10,0,15,34,71,-23,79,16,-9,17,19,127,19,25,22,-2,-10,20,127,-6,-15,17,-23,19,127,26,-86,-15,-4,-32,-17,-45,3,-25,-17,28, 127,-124,87,107,-44,127,45,-118,73,1,-20,127,127,-96,-13,13,9,127,127,-109,127,-80,81,74,-102,-114,-75,-33,-50,48,-60,-17,-93,60,-127,-84,-37,-15,-58,72,-1,127,118,85,-54,-109,-123,-48,-16,-127,45,82,82,-30,48,82,-49,39,-87,-112,-45,-41,-59,61,76,-57,31,31,-80,32,-17,87,106,127,8,18,2,63,-31,49,64,127,127,-22,-4,77,-116,127,-127,-93,5,-127,-87,-127,-37,107, -78,-12,33,-78,14,-25,68,-9,86,-40,-31,23,-13,4,-10,-9,-13,-17,11,-7,-12,-103,27,2,-125,90,-3,-55,110,52,-15,13,0,19,20,-30,-6,33,14,16,28,12,-127,67,17,-26,37,16,-15,8,-15,4,3,-2,-1,23,-70,5,-60,50,1,42,42,-7,-2,-37,-28,26,8,-1,-5,34,6,-24,-11,1,-9,-3,-84,1,-21,-26,-15,3,-105,12,-34,-20,-55,27,-28,-46,30,-27,-14,5, 
  /* [0][1][][] */ -67,-72,81,-34,-49,94,24,127,-51,-23,-3,-124,24,-120,79,37,-8,-61,-17,87,55,-88,47,63,-100,-9,127,-21,-21,62,122,-106,-127,90,-89,-53,-33,28,-30,92,-54,-27,-3,59,-54,127,-27,67,15,93,20,-4,15,-53,26,31,127,122,-77,-84,127,-34,-33,127,79,-37,-15,4,127,33,127,96,-41,98,-4,11,11,11,-30,7,-44,108,-74,111,5,27,-61,30,74,-127,-33,-9,127,-68,-24,1, 65,127,65,-110,127,77,101,37,-127,127,127,-42,-62,-127,-127,127,127,-66,-124,-50,111,94,-126,127,-110,-82,-52,127,-127,110,-127,-127,-86,127,112,127,127,-127,-107,127,-67,-96,124,-127,-127,-33,-127,-127,127,-112,87,40,127,127,127,-127,101,-127,-127,127,21,-80,-127,-104,-127,127,-127,127,-125,-127,-106,-87,-127,-81,127,127,-127,127,-76,127,127,31,-36,-127,60,127,90,45,119,14,127,12,-66,39,127,-127, -54,-14,-53,38,-57,-98,31,-27,22,-33,-30,96,3,112,13,14,-7,66,-5,120,12,-81,-43,16,-76,111,-86,-19,-74,-19,18,-64,-72,44,5,-18,-25,45,-69,51,127,-6,-34,45,-44,-64,23,48,8,114,-6,5,-25,-71,8,22,94,2,-14,22,-33,127,101,-54,-40,13,37,-7,-78,115,-21,-87,-5,-54,-19,-20,26,19,72,-32,-69,-46,56,12,-42,-18,72,23,9,61,-44,9,-40,101,-26,-2, 
  /* [0][2][][] */ -72,2,-1,-21,12,-42,72,26,59,-36,-39,-10,14,21,-26,11,-10,65,9,1,-42,-94,2,-4,-32,-43,34,-69,81,39,23,24,15,-17,-11,-51,-14,33,-3,-9,-23,-9,-70,121,3,39,9,40,-15,-31,7,-22,27,-2,6,20,-73,24,-32,14,18,-1,-14,-2,2,-45,-49,23,-29,16,28,31,10,-21,33,5,17,3,-81,-11,-8,-13,18,16,-123,4,15,-42,-59,-48,-32,-69,10,65,-18,-5, 120,33,-127,-34,-73,-26,44,29,-65,-37,-20,-111,-76,123,-13,48,7,-54,-7,-127,95,-58,-39,-1,-127,127,-57,20,-44,-21,-10,-10,-68,12,29,3,-24,-31,127,58,6,-17,66,-25,-40,80,-73,-42,-32,-8,-127,-127,-48,-25,7,43,-72,-6,-9,40,-5,-16,15,-49,-53,34,64,-13,114,114,-22,-71,5,-59,19,3,97,5,50,22,12,-94,-44,1,6,12,127,41,-62,36,-23,-113,40,88,-11,28, -59,8,-17,28,13,-74,-127,2,-14,-12,-15,4,11,-15,18,7,-8,-13,6,15,-38,-84,16,1,15,-78,12,4,-68,-40,-9,14,35,-29,-5,-31,-35,1,41,-30,22,-3,-47,-21,2,66,24,18,-9,-4,12,-11,26,2,-6,1,-72,-10,-21,-41,-10,12,95,-11,37,-2,1,39,-5,8,-4,19,-18,14,6,13,38,1,79,-9,3,-13,-5,-21,76,0,43,-37,56,36,-19,-86,-5,12,-15,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0035423822700977325, 0.0042898384854197502, 0.0045904992148280144, 0.008984096348285675, 0.010840883478522301, 0.0035530801396816969, 0.0018140337197110057, 0.0035768621601164341, 0.010401505976915359, 0.0065691526979207993, 0.010196909308433533, 0.0045390869490802288, 0.013536038808524609, 0.0078506655991077423, 0.015570168383419514, 0.0053058462217450142, 0.0089456057175993919, 0.0078825484961271286, 0.010007889941334724, 0.0042578866705298424, 0.003666694276034832, 0.0023772097192704678, 0.0059908227995038033, 0.0023951437324285507, 0.0034487545490264893, 0.0047647473402321339, 0.0059895850718021393, 0.0070851277559995651, 0.0034346354659646749, 0.021531723439693451, 0.015966067090630531, 0.010363274253904819, 0.0048399437218904495, 0.0053759380243718624, 0.0095678567886352539, 0.017901342362165451, 0.024598130956292152, 0.00846078060567379, 0.0088231600821018219, 0.0032586466986685991, 0.0092933019623160362, 0.0085600456222891808, 0.01955980621278286, 0.0036347678396850824, 0.013782089576125145, 0.0047610225155949593, 0.0038876358885318041, 0.014315115287899971, 0.023420145735144615, 0.0049434090033173561, 0.02565237320959568, 0.0066937562078237534, 0.011717037297785282, 0.0057262121699750423, 0.010608217678964138, 0.005006102379411459, 0.0067314016632735729, 0.019128715619444847, 0.0018168891547247767, 0.0073610302060842514, 0.011937740258872509, 0.013874051161110401, 0.006060334388166666, 0.0062886858358979225, 0.0051538730040192604, 0.0049270116724073887, 0.015674732625484467, 0.010060650296509266, 0.0092690596356987953, 0.0075289658270776272, 0.0086676208302378654, 0.0042420630343258381, 0.014054863713681698, 0.0061557642184197903, 0.016899334266781807, 0.01610998809337616, 0.0070819794200360775, 0.0033493104856461287, 0.0027377475053071976, 0.0053899162448942661, 0.009065127931535244, 0.009351399727165699, 0.0071081859059631824, 0.013506412506103516, 0.002852525794878602, 0.0054574799723923206, 0.003193659707903862, 0.019466029480099678, 0.011476964689791203, 0.0056287776678800583, 0.019149156287312508, 0.0017224486218765378, 0.0063228579238057137, 0.0045612207613885403, 0.018962172791361809, 0.013335127383470535, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1751, 9265, 14911, 31848, 30511, -2961, -2829, 4204, 28780, -4388, 8268, 5202, 11604, 9015, 36621, 1660, 2741, 10796, 13677, 6232, -354, 315, 13683, -870, 6198, -118, 11004, 9980, 5705, 42047, 57506, 27107, 9623, -564, 13421, 3317, 3643, 3435, 22219, -856, 7916, 10951, 36301, -3102, 28534, 8237, 8112, 12015, 64035, 9358, -777, 9070, -3383, -48, -2434, 4624, -791, 19708, 6785, 9020, 6617, 12438, 9233, 5255, 10274, 15357, 8212, -4479, 11555, -3232, 4324, 11648, 20715, 6278, -6793, -5478, 6993, 237, 1975, -1416, 16556, 12805, 4000, 16002, 2367, 378, 12195, 65918, 10332, 17245, 7899, -330, 5842, 7903, 7208, 13247, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00021655348245985806, 0.00015990628162398934, 0.00012822852295357734, 7.1678718086332083e-05, 0.00010045561066363007, 0.00032962055411189795, 0.00033100848668254912, 0.00039359516813419759, 7.8141798439901322e-05, 0.00030250370036810637, 0.00033150686067529023, 0.00016562985547352582, 0.00010938398190774024, 0.00025593838654458523, 6.5832035033963621e-05, 0.00037862584576942027, 0.00019191115279681981, 0.00012069224612787366, 0.00016561447409912944, 0.00019053668074775487, 0.00027095750556327403, 0.00061226205434650183, 0.00014667994400952011, 0.00062300334684550762, 0.00041695311665534973, 0.00020980479894205928, 0.00020659365691244602, 0.00015013744996394962, 0.00029713596450164914, 8.4137267549522221e-05, 4.9477966967970133e-05, 9.3770890089217573e-05, 0.00018090906087309122, 0.00040622655069455504, 0.00014752564311493188, 0.00018124929920304567, 0.00014627496420871466, 0.00043643286335282028, 0.00012141154002165422, 0.00065183080732822418, 0.00021302115055732429, 0.00015230073768179864, 7.0936992415226996e-05, 0.00034796423278748989, 0.0001148968658526428, 0.00018966045172419399, 0.00020718615269288421, 0.00021877838298678398, 6.3966603192966431e-05, 0.00022106799588073045, 0.00016788087668828666, 0.00018759780505206436, 0.00033255692687816918, 0.0002713852736633271, 0.00042805320117622614, 0.00022984907263889909, 0.00016177880752366036, 9.6578776719979942e-05, 0.00031509911059401929, 0.00016038860485423356, 0.00024115321866702288, 0.00010882635251618922, 0.00015594740398228168, 0.00018041433941107243, 0.000238066102610901, 0.00012947546201758087, 0.00015895538672339171, 0.00028708853642456234, 0.00015063949103932828, 0.00023424229584634304, 0.00025221341638825834, 0.00014182114682625979, 9.8978627647738904e-05, 0.000176636254764162, 0.00022067929967306554, 0.00024929485516622663, 0.00022529368288815022, 0.00029042485402897, 0.00032357085729017854, 0.00025101692881435156, 0.00012966652866452932, 0.00012301294191274792, 0.00020848025451414287, 0.00012007999612251297, 0.00040355324745178223, 0.00028173974715173244, 0.00018478999845683575, 5.776835314463824e-05, 0.00014179156278260052, 0.00013350104563869536, 0.00016423086344730109, 0.000352685950929299, 0.00024507989292033017, 0.00018812077178154141, 0.00015998251910787076, 0.00012682314263656735, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -28,67,-4,65,-15,26,34,-16,47,87,-51,65,-2,-127,62,-101, 
  /* [1][0][][] */ 25,49,-5,-47,23,-42,127,-75,-30,61,8,-23,10,-33,-6,-7, 
  /* [2][0][][] */ -92,-30,-35,-53,1,-13,67,127,-21,56,112,-45,-84,37,17,6, 
  /* [3][0][][] */ -49,-10,45,90,-22,89,45,108,19,60,-127,26,35,-65,-79,-98, 
  /* [4][0][][] */ 16,-26,28,126,-47,80,-9,74,61,-41,11,67,2,12,-127,-45, 
  /* [5][0][][] */ 3,-36,60,-33,3,-36,-20,2,-90,71,-43,-127,0,-14,-19,-68, 
  /* [6][0][][] */ 19,40,8,-48,96,116,-127,-44,-74,-15,21,-16,125,-12,43,-3, 
  /* [7][0][][] */ 38,4,127,8,-52,-69,7,7,-81,50,-58,-64,-6,6,57,-55, 
  /* [8][0][][] */ 52,32,85,127,-99,92,1,37,43,16,14,-47,-11,37,-46,-93, 
  /* [9][0][][] */ 19,-127,95,-43,59,-8,84,-87,79,93,120,-22,-29,-13,-76,-33, 
  /* [10][0][][] */ -22,-31,-44,8,-16,12,-7,5,97,127,4,-18,-62,80,30,1, 
  /* [11][0][][] */ -10,-80,-39,-127,-23,-50,-82,-118,35,48,9,81,4,-4,71,-58, 
  /* [12][0][][] */ 19,-17,-15,-72,-31,-56,-111,-11,-86,-102,2,-13,-42,127,92,65, 
  /* [13][0][][] */ -82,-127,-29,1,18,-20,2,-3,76,33,-7,20,-12,9,47,45, 
  /* [14][0][][] */ -8,-36,35,24,24,33,-5,127,-1,65,10,-53,11,44,-47,108, 
  /* [15][0][][] */ 27,-33,-6,49,13,-26,69,-3,7,-127,6,-38,18,-19,12,-21, 
  /* [16][0][][] */ 60,-78,-56,66,-23,32,18,-10,127,58,74,-31,-15,102,77,87, 
  /* [17][0][][] */ -49,-99,65,127,58,-5,13,-61,114,-96,-47,-37,9,54,-114,37, 
  /* [18][0][][] */ -42,63,-11,53,-82,6,-62,1,-98,-26,-43,-79,30,-127,97,-6, 
  /* [19][0][][] */ 74,-110,32,-60,71,13,-127,83,19,-66,40,-6,-5,56,45,72, 
  /* [20][0][][] */ 23,-33,61,-70,21,3,-35,28,4,-71,64,-21,-10,23,-57,127, 
  /* [21][0][][] */ -55,23,12,-20,3,43,-126,-36,-24,30,6,6,-127,-15,-6,44, 
  /* [22][0][][] */ 18,-19,18,0,44,-26,5,-21,-127,16,-35,-62,3,-6,56,-30, 
  /* [23][0][][] */ 15,3,28,-33,19,3,3,-2,6,10,58,-30,127,19,-5,-69, 
  /* [24][0][][] */ 32,24,17,-112,-16,8,89,11,-30,29,-49,-117,-9,-127,58,-9, 
  /* [25][0][][] */ -74,19,-47,-13,23,-4,-122,-127,-19,40,66,-13,-83,-101,30,-83, 
  /* [26][0][][] */ 21,-54,54,-127,32,-20,-11,16,117,21,54,26,-37,14,-7,89, 
  /* [27][0][][] */ 88,-32,21,-34,-30,-33,-15,-24,-46,28,-127,17,-7,-33,9,30, 
  /* [28][0][][] */ -127,-62,-47,-31,39,5,54,-40,33,7,-67,39,104,-16,-16,26, 
  /* [29][0][][] */ -61,-47,20,127,-1,21,17,-42,19,-43,-79,59,-48,-62,13,-43, 
  /* [30][0][][] */ 42,44,77,4,7,70,-12,115,-53,-63,72,-22,10,9,-127,39, 
  /* [31][0][][] */ -13,-82,-1,-76,28,-77,8,-66,-12,48,118,18,-1,112,90,127, 
  /* [32][0][][] */ -12,52,-31,39,-127,17,-72,-22,-33,-33,-20,77,27,41,19,67, 
  /* [33][0][][] */ 37,-4,-9,127,4,16,28,-56,-75,62,61,-4,-9,-18,-3,88, 
  /* [34][0][][] */ 25,-27,21,-16,78,-3,-127,-56,-74,74,-55,27,8,-34,-18,17, 
  /* [35][0][][] */ 127,20,-24,-35,61,-72,-45,-33,-9,-1,-86,18,44,-19,-41,16, 
  /* [36][0][][] */ 76,-3,-127,52,79,42,-124,55,-58,-105,-54,-5,-54,-18,-48,28, 
  /* [37][0][][] */ 27,-6,127,12,-63,34,33,-56,-16,18,-74,5,2,-7,14,-4, 
  /* [38][0][][] */ -127,37,5,-4,12,27,43,-44,54,19,94,25,-6,-30,11,-60, 
  /* [39][0][][] */ -12,8,0,19,54,-31,-127,40,-6,49,-4,-46,8,-33,23,-6, 
  /* [40][0][][] */ 26,96,-24,70,30,41,53,12,-127,-9,-50,15,73,-25,-35,-43, 
  /* [41][0][][] */ -15,45,-68,-41,-55,-49,127,61,-38,85,-56,-6,37,51,74,-25, 
  /* [42][0][][] */ -59,-73,-65,41,-27,-127,-80,-51,-46,-79,32,-91,-6,1,-59,-100, 
  /* [43][0][][] */ -56,-8,40,-23,4,8,-56,-80,-19,30,50,-18,-127,24,54,12, 
  /* [44][0][][] */ -19,7,-17,0,2,-26,-11,-43,127,13,18,22,28,103,15,56, 
  /* [45][0][][] */ -40,-104,-12,-75,25,19,19,25,48,-66,2,8,48,70,-19,127, 
  /* [46][0][][] */ -20,4,-71,117,-111,-21,-10,-100,-127,-2,-59,15,22,-14,0,-57, 
  /* [47][0][][] */ -35,41,-74,127,14,48,-18,9,8,39,59,46,-18,-12,49,-61, 
  /* [48][0][][] */ -21,-2,-2,-127,66,-20,-50,-37,-29,68,-20,-30,-26,-21,71,-30, 
  /* [49][0][][] */ -47,97,-8,31,-15,1,-48,-83,-24,21,-41,-24,-48,-70,-40,-127, 
  /* [50][0][][] */ 0,86,51,-71,78,29,-11,48,127,-32,-39,33,-31,-35,-2,-16, 
  /* [51][0][][] */ -9,3,-26,-47,67,30,-49,-127,-15,-83,28,-17,-21,2,43,-14, 
  /* [52][0][][] */ 11,50,-6,33,18,14,-68,106,-95,127,-52,-4,36,101,-22,-36, 
  /* [53][0][][] */ -5,57,47,-68,-18,16,40,-40,-11,-68,-41,35,21,-127,-102,-49, 
  /* [54][0][][] */ -17,-12,52,31,56,-34,18,-31,4,12,-10,-18,-5,127,-33,-39, 
  /* [55][0][][] */ -91,127,63,17,32,-2,-51,38,-44,-14,25,-32,-7,3,106,42, 
  /* [56][0][][] */ 69,1,42,-118,43,-13,-45,60,15,-15,44,127,-35,16,106,38, 
  /* [57][0][][] */ 3,-24,25,59,-33,94,41,127,-22,14,18,-31,-29,22,-14,7, 
  /* [58][0][][] */ 11,74,15,-127,-18,24,-41,-6,121,-41,47,115,2,-63,65,16, 
  /* [59][0][][] */ 44,94,85,-109,-111,14,11,46,1,8,112,-99,-27,-127,-106,-25, 
  /* [60][0][][] */ 64,51,94,-61,-26,127,38,-41,-52,45,-72,-68,51,-4,25,0, 
  /* [61][0][][] */ -11,68,-56,-3,-60,13,101,127,-38,43,-21,-21,-14,47,-8,-45, 
  /* [62][0][][] */ 10,-54,-2,-7,-21,-16,-70,48,-126,-127,-72,-75,26,-82,51,48, 
  /* [63][0][][] */ 2,16,8,-70,9,-6,-80,-127,-9,65,37,2,-1,-7,16,-63, 
  /* [64][0][][] */ -41,51,30,73,127,72,-48,-108,29,-123,-19,-93,-19,2,-7,21, 
  /* [65][0][][] */ -127,-3,29,-123,32,77,95,-88,-117,64,60,14,35,-18,-34,-48, 
  /* [66][0][][] */ 83,-12,76,-21,-36,53,-73,102,-98,-25,84,-127,-78,93,-120,28, 
  /* [67][0][][] */ 46,-5,-7,67,37,-18,-51,-83,3,-127,-85,-20,-66,28,-61,-19, 
  /* [68][0][][] */ -42,-71,-11,83,-63,-127,-1,-41,11,-45,120,-31,-41,76,93,-49, 
  /* [69][0][][] */ -32,21,-26,78,8,-89,19,48,46,31,25,-49,127,-15,-38,6, 
  /* [70][0][][] */ 14,8,-43,-49,-61,-22,127,81,-48,55,-14,-6,-5,56,38,-37, 
  /* [71][0][][] */ -13,6,-19,-44,28,-13,-22,56,-34,-43,6,-3,15,-127,77,-11, 
  /* [72][0][][] */ 82,88,31,84,4,-5,-111,-125,-12,5,-127,27,54,97,59,79, 
  /* [73][0][][] */ -69,-127,-14,-78,-113,-51,20,-26,1,-17,5,-19,24,-82,48,-47, 
  /* [74][0][][] */ -30,41,86,125,-16,-8,-103,127,14,-45,-19,-42,6,15,-8,27, 
  /* [75][0][][] */ -59,24,-72,-13,-5,88,112,99,-8,78,-11,-33,-127,48,19,10, 
  /* [76][0][][] */ -53,72,-97,79,4,-15,-127,-67,-86,13,-55,-92,73,7,45,-9, 
  /* [77][0][][] */ -41,23,-38,-30,-55,-41,4,-62,127,7,-49,45,26,45,35,-76, 
  /* [78][0][][] */ -64,-57,-15,42,115,14,-25,-14,-48,-49,-127,32,37,-80,32,19, 
  /* [79][0][][] */ 36,12,71,-63,127,9,36,-10,80,16,-4,-15,-27,-20,-11,-47, 
  /* [80][0][][] */ -17,25,80,-127,-13,-4,65,24,-37,-24,-8,18,37,120,-57,26, 
  /* [81][0][][] */ 72,-32,24,45,-16,92,-29,-9,-33,-19,-28,-58,-56,34,-127,29, 
  /* [82][0][][] */ -127,-34,15,-78,14,-3,42,-52,12,6,-48,-91,-4,-118,-93,76, 
  /* [83][0][][] */ 29,-13,9,-48,-34,-5,-55,57,-127,-38,30,-97,4,-44,49,85, 
  /* [84][0][][] */ 127,44,29,12,-29,10,-35,6,-13,-6,65,-5,-39,-16,39,-71, 
  /* [85][0][][] */ -30,-19,57,-8,38,-2,-7,127,-33,-75,-50,-30,-21,95,41,-116, 
  /* [86][0][][] */ 127,42,1,-4,-89,57,-17,70,-99,-70,18,-41,-47,-81,33,68, 
  /* [87][0][][] */ 127,-68,35,12,-55,-6,-17,-14,46,-18,-75,8,-17,3,-27,51, 
  /* [88][0][][] */ 49,98,-65,-7,-2,-13,-23,7,40,24,56,-19,-44,3,48,-127, 
  /* [89][0][][] */ 86,96,-127,-18,-36,-14,47,-69,45,50,-20,-41,-40,9,-20,-121, 
  /* [90][0][][] */ -32,-8,27,-33,-89,-35,96,-28,117,-40,2,-17,127,42,-27,-10, 
  /* [91][0][][] */ -14,-47,2,-87,-51,14,75,-82,-17,111,127,70,-5,-58,-53,61, 
  /* [92][0][][] */ 15,7,-29,2,78,-11,-71,-126,70,-127,53,-36,-22,21,-87,29, 
  /* [93][0][][] */ 127,-24,28,-87,-69,-14,54,77,111,-78,71,34,25,75,32,-4, 
  /* [94][0][][] */ -96,29,-53,35,69,-127,-98,48,-7,-73,105,-71,-45,-2,-52,-12, 
  /* [95][0][][] */ -20,117,-45,-99,20,27,-89,45,-50,-60,-67,-127,-16,13,-80,-1, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.000717693823389709, 0.00052995566511526704, 0.00042497037793509662, 0.00023755505389999598, 0.00033292640000581741, 0.001092416699975729, 0.0010970165021717548, 0.0013044390361756086, 0.0002589747600723058, 0.001002546981908381, 0.0010986682027578354, 0.00054892455227673054, 0.00036251649726182222, 0.00084822188364341855, 0.00021817818924318999, 0.0012548282975330949, 0.00063602509908378124, 0.00039999393629841506, 0.00054887356236577034, 0.00063146988395601511, 0.00089799764100462198, 0.0020291369874030352, 0.00048612145474180579, 0.0020647353958338499, 0.0013818511506542563, 0.00069532758789137006, 0.00068468530662357807, 0.00049758015666157007, 0.00098475744016468525, 0.00027884473092854023, 0.00016397811123169959, 0.00031077212770469487, 0.00059956236509606242, 0.0013463015202432871, 0.00048892421182245016, 0.00060068996390327811, 0.0004847792733926326, 0.0014464101986959577, 0.00040237780194729567, 0.0021602744236588478, 0.00070598709862679243, 0.00050474965246394277, 0.00023509685706812888, 0.0011532106436789036, 0.00038078709621913731, 0.00062856590375304222, 0.00068664894206449389, 0.00072506751166656613, 0.00021199582261033356, 0.00073265563696622849, 0.000556384795345366, 0.0006217299378477037, 0.0011021483223885298, 0.00089941534679383039, 0.0014186386251822114, 0.00076175760477781296, 0.00053616153309121728, 0.00032007793197408319, 0.0010442902566865087, 0.00053155416389927268, 0.00079922139411792159, 0.00036066840402781963, 0.000516835309099406, 0.00059792277170345187, 0.00078899017535150051, 0.00042910297634080052, 0.000526804244145751, 0.00095145858358591795, 0.00049924402264878154, 0.00077631743624806404, 0.00083587667904794216, 0.00047001856728456914, 0.00032803142676129937, 0.00058540154714137316, 0.00073136744322255254, 0.00082620407920330763, 0.00074666028376668692, 0.0009625156526453793, 0.0010723669547587633, 0.00083191134035587311, 0.00042973618838004768, 0.00040768508915789425, 0.00069093779893592, 0.00039796484634280205, 0.0013374417321756482, 0.00093373178970068693, 0.00061242439551278949, 0.00019145381520502269, 0.00046992051647976041, 0.00044244437594898045, 0.0005442880792543292, 0.0011688591912388802, 0.00081223505549132824, 0.0006234631291590631, 0.0005302083445712924, 0.00042031271732412279, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 2415, -2518, -21109, 22184, 25264, -8796, -9852, -7212, 2468, 1389, 32917, 15519, -16944, 17088, 35587, -14953, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.0004724093887489289, 0.0002782483643386513, 0.00031194533221423626, 0.00022651748440694064, 0.00027999444864690304, 0.00028032960835844278, 0.00032558111706748605, 0.00047477937187068164, 0.00027626164956018329, 0.00024120132729876786, 0.00040919982711784542, 0.00080362043809145689, 0.00044655296369455755, 0.0003852952504530549, 0.00049348827451467514, 0.00031489055254496634, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -9,-9,-10,26,23,69,-6,-22,51,10,-1,10,-2,11,27,66,12,-9,2,-38,77,-41,21,-8,-10,-26,-39,-81,4,-9,37,59,127,-5,-3,-10,4,-27,7,11,-27,4,-2,-48,4,-28,-33,19,-12,10,3,-9,-24,2,-6,-10,42,35,-21,-33,-48,48,-13,-12,0,7,47,13,7,-8,10,-15,-75,6,-8,-4,5,-100,1,-5,40,4,-58,-64,32,-17,6,13,-45,-25,18,-64,36,29,-13,110, 
  /* [1][0][][] */ 54,-49,10,81,-1,-59,-74,-54,27,-69,10,40,37,-70,-35,-35,-64,-13,49,4,-31,-113,-48,5,117,-69,-47,44,-47,112,-12,45,15,-19,-75,22,-9,-6,127,-28,0,-83,27,15,-38,12,52,-8,32,-3,7,-31,67,-77,9,-15,70,46,-15,-90,34,-52,34,-44,16,-79,44,20,33,43,-84,-6,-88,32,-35,68,27,67,30,-51,11,23,-53,59,-107,58,-34,43,-68,-5,53,-5,-15,-22,31,-11, 
  /* [2][0][][] */ 11,25,14,-39,17,-10,23,40,15,8,22,59,-9,27,68,-19,3,-18,-2,15,-30,-57,29,-41,-4,28,-36,18,-6,-5,99,-26,27,-41,-11,38,25,127,-32,-18,34,-5,2,25,-36,-63,-47,16,1,33,-30,3,40,13,6,-36,-46,-11,26,35,5,5,71,117,21,-40,8,-66,23,11,7,-2,7,-8,-44,19,37,37,22,16,41,89,13,-14,12,8,17,24,25,11,4,-75,-14,-1,-2,79, 
  /* [3][0][][] */ -59,0,-47,60,-7,9,-24,-37,12,44,14,20,9,15,70,6,18,-32,12,-4,-1,-1,5,4,15,9,29,2,-1,-50,31,-48,20,-27,-50,43,-16,-9,21,12,-40,-91,2,-34,-1,12,-3,29,-127,51,-28,15,-124,-34,-28,-47,64,-3,1,47,-7,23,12,3,-25,-67,-40,-9,29,28,-4,24,-11,15,-18,-26,-45,-58,31,-53,-15,-42,13,82,36,27,26,-24,1,-31,32,1,-31,9,-20,-27, 
  /* [4][0][][] */ 14,-48,34,-91,-43,-14,-83,48,-24,-45,-57,9,-2,76,13,0,69,-9,-1,-15,9,27,70,11,-7,33,7,72,-9,15,-6,-25,-78,-13,-8,19,45,-3,13,0,30,2,-100,-40,30,14,-9,-2,12,84,-31,-27,-33,1,-4,-16,-15,-28,25,13,19,20,29,-11,42,-127,9,-14,-87,0,-45,-41,4,42,-53,13,-31,88,57,-18,-4,-9,118,-62,82,-10,-34,-2,119,-23,10,28,-49,14,-11,-49, 
  /* [5][0][][] */ -4,5,-22,9,20,-18,38,70,64,-9,-15,-15,-27,49,78,39,-28,-21,11,-17,-32,-3,-22,-55,29,5,29,29,90,-7,56,43,-31,39,-1,3,-45,-52,11,-14,-23,-19,22,-12,45,11,2,-11,-15,31,4,-7,-35,-34,28,-13,-55,-40,-8,40,-49,28,-22,-58,24,27,-26,11,1,49,10,22,64,-14,-3,39,26,23,29,112,16,-48,11,34,24,14,38,-32,-34,38,14,-127,-31,-29,-3,-122, 
  /* [6][0][][] */ -23,-20,5,-52,1,-30,25,7,-17,16,23,-23,44,-37,-6,-27,-26,-45,-1,34,-6,-2,-8,19,81,-11,8,-41,20,-48,13,-24,-23,44,-26,6,47,8,38,50,0,-15,7,-41,-29,-44,17,-127,15,26,48,10,-15,-21,15,-13,18,-23,-10,22,30,33,-3,-9,38,86,25,-46,-4,-17,35,-32,26,-6,71,1,3,38,7,9,-35,4,46,-49,14,51,33,-37,3,27,-58,6,5,8,-2,22, 
  /* [7][0][][] */ 11,30,22,-16,-8,8,-32,-30,28,-30,-24,6,-8,-73,26,-2,12,-27,-6,-24,16,-30,-44,-17,-17,-17,3,-29,-6,33,11,-3,0,-31,-2,-13,-2,-9,-16,8,3,-18,-31,43,-6,11,-2,60,-18,20,-3,-7,-19,17,-12,-42,33,12,-7,-4,3,-1,20,16,11,28,16,0,-8,1,-14,26,-1,-2,-37,16,35,10,-5,-12,11,-16,42,1,-26,127,-1,8,-32,-24,9,12,-19,5,-7,2, 
  /* [8][0][][] */ -48,55,-25,-17,58,11,9,26,-14,69,-20,26,16,51,4,-20,-13,36,-68,16,-12,46,6,9,-31,-30,-2,-2,76,-127,22,21,18,6,43,41,-34,18,-100,38,-3,59,44,-112,-22,-14,54,23,-35,11,6,60,-109,34,-2,-29,8,-13,38,-7,-7,-62,17,30,-45,60,21,-7,41,15,58,100,-26,-3,58,12,-7,-71,19,-40,30,-48,12,-13,-41,67,30,-33,4,51,7,10,37,-23,-18,6, 
  /* [9][0][][] */ -5,-92,-16,-24,64,-13,-6,67,24,-23,15,1,-81,-56,-39,38,-5,-9,11,37,-44,5,-43,-43,83,-7,41,-55,-69,-13,-48,6,-19,-1,5,23,5,85,-64,1,74,-9,28,-89,17,-7,62,-110,-66,-17,-3,62,32,37,-1,22,-100,4,-12,23,-5,-21,21,70,18,127,54,76,14,13,19,-29,-35,-5,-28,19,60,-27,12,17,13,23,19,-65,-11,14,-21,19,-36,75,-69,5,30,-15,4,-23, 
  /* [10][0][][] */ 48,50,-18,5,81,-127,-6,-21,-11,48,52,-24,-24,50,14,-78,11,28,-18,27,-74,-5,6,-29,-73,-11,-65,46,22,-1,1,55,-11,-4,30,-10,73,-15,1,8,-3,86,44,-15,-46,-2,-35,18,-38,-48,-32,1,-16,-8,-11,-9,-25,16,-6,5,4,11,-13,40,-10,42,44,24,30,15,26,25,-72,-43,-28,-14,26,34,-13,11,39,-14,-67,-44,60,-37,93,3,-39,-4,18,-11,74,24,-14,-110, 
  /* [11][0][][] */ 36,29,-33,6,28,6,74,-13,-10,-20,-5,-17,0,-11,22,-4,-18,-9,-89,12,6,18,-3,1,-36,-24,-13,-24,27,5,-5,3,5,20,7,33,10,20,-28,23,12,30,82,-86,16,-36,-6,1,-127,26,14,-48,26,8,10,-5,-26,-33,10,8,22,-28,-14,7,-45,50,-18,-2,39,-13,40,35,-23,-36,23,33,8,-25,-42,25,29,1,67,30,12,1,-7,-10,-8,56,-35,-2,8,-7,-19,10, 
  /* [12][0][][] */ -20,7,21,22,-35,66,-15,20,127,-6,-26,8,3,30,-35,-39,-6,19,-7,45,42,17,-14,-32,3,13,8,-31,-63,-32,36,-46,-3,0,-10,-28,-9,9,3,19,-48,1,7,19,9,33,-7,5,36,17,-59,-4,0,1,12,-25,39,-34,6,9,24,-13,-5,-26,-17,39,-56,-17,-8,-1,-18,-5,23,12,-49,-2,25,-1,6,-46,-25,-3,47,38,-2,-7,-26,-37,25,28,7,35,-16,2,11,30, 
  /* [13][0][][] */ 35,1,-26,37,51,-2,-3,30,-2,5,-1,7,14,-15,-6,-11,17,-84,-32,30,-20,-28,19,15,-4,14,-3,5,-22,-47,-10,27,-15,23,11,36,19,-6,-11,32,-23,-15,20,67,32,15,-3,-127,19,-2,13,15,-12,17,0,-30,20,14,58,14,16,17,-4,-1,-21,-15,-26,-77,19,21,-14,-24,-31,49,12,30,-51,1,22,20,46,-16,3,30,8,41,14,20,1,17,37,-21,8,21,-14,-11, 
  /* [14][0][][] */ -76,-14,11,39,13,0,-52,0,20,18,-2,36,37,-42,-102,12,65,-4,4,-9,2,-18,32,5,-111,-20,24,36,-49,-37,-1,-6,-11,-43,35,-62,22,41,-19,13,-16,41,-40,-5,29,127,62,46,-81,37,8,27,-32,-6,20,13,19,29,38,47,39,38,26,39,6,-42,-24,58,-15,66,-51,-64,-102,15,-12,31,-14,47,86,1,55,4,50,42,-1,13,37,30,34,10,82,13,-20,29,16,-8, 
  /* [15][0][][] */ 107,30,32,5,-9,63,6,-45,-12,38,-17,13,-110,-11,-14,36,8,39,74,-33,14,28,-81,53,-11,7,28,32,27,50,-72,-79,9,-22,74,-18,26,-44,-97,-127,-39,41,-19,63,17,74,-10,-46,91,-20,-52,12,27,-114,45,-105,3,-41,22,4,-108,-10,17,30,74,-15,-45,53,-23,69,-25,8,19,5,-3,-12,4,-40,51,6,3,-31,68,84,-30,-20,-11,-32,28,0,49,27,-60,40,25,-8, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.020077398046851158, 0.011825555004179478, 0.013257676735520363, 0.0096269929781556129, 0.011899763718247414, 0.011914008297026157, 0.013837197795510292, 0.020178122445940971, 0.011741120368242264, 0.010251056402921677, 0.017390992492437363, 0.03415386751294136, 0.018978500738739967, 0.016375048086047173, 0.020973250269889832, 0.013382848352193832, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 12841, -9676, 3130, 66177, -2576, -4903, -7941, 2973, -2877, 812, 4240, -3327, 567, -4497, 5998, -7098, -1694, 16675, 23978, 1844, 7147, -2578, -202, 158, 15542, -1216, -1020, -4125, -5992, -7334, 7857, -9740, -577, -846, 647, 13333, 781, -3202, 23669, 783, -996, 1362, -8588, -7710, -9137, 69564, 722, 18485, 29532, -14578, -503, 5624, 6922, -200, -6985, 1217, -10084, 2083, 1857, -7955, 17, -1203, -12043, 1681, 2083, 15221, 30713, 18496, -14665, 576, -1025, -1932, 30162, 11705, 147, -61, 17407, 37093, -1287, -10268, -2288, -9073, 1819, -3265, 312, 1046, 2136, -1223, 2026, -2096, 1444, -367, -402, 859, 45, 47259, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00015723149408586323, 0.00010043168003903702, 0.00018629150872584432, 3.334225038997829e-05, 0.00014246658247429878, 0.00017086640582419932, 0.00042876036604866385, 6.7138811573386192e-05, 0.00011176364932907745, 0.00042673989082686603, 0.00018640962662175298, 0.00028951454441994429, 0.00012132176925661042, 0.00049842073349282146, 0.00016697061073500663, 0.00012028545461362228, 0.00010620633838698268, 0.00029903711401857436, 6.435154500650242e-05, 0.0003788889735005796, 3.0029636036488228e-05, 0.00016627996228635311, 0.00013682522694580257, 0.0003432671946939081, 0.00025705574080348015, 0.00024726305855438113, 0.00013310971553437412, 0.00024062320881057531, 0.00018859555711969733, 0.00011395513138268143, 0.0001114063779823482, 0.00015642741345800459, 0.00011742673814296722, 0.00015460295253433287, 0.00019155765767209232, 0.00017548567848280072, 0.00044870781130157411, 0.00011015711788786575, 5.5943281040526927e-05, 0.00018593162531033158, 0.00017552143253851682, 0.00030226932722143829, 0.00039252886199392378, 0.00017238150758203119, 0.00016043891082517803, 6.2006387452129275e-05, 0.00019996115588583052, 0.00017495715292170644, 8.862243703333661e-05, 0.00015702612290624529, 0.00015766944852657616, 0.00024195680452976376, 0.000209747304324992, 0.00022771378280594945, 0.00024041665892582387, 0.0003940946189686656, 0.00043316575465723872, 0.00023988221073523164, 0.00010285976168233901, 7.2899667429737747e-05, 0.00024885099264793098, 0.0001441009808331728, 0.00030095691909082234, 0.00012606801465153694, 0.00020487065194174647, 0.00020271811808925122, 8.5955558461137116e-05, 9.2673442850355059e-05, 0.00029064173577353358, 0.00024672399740666151, 0.00027143536135554314, 0.00011117102258140221, 0.00020153586228843778, 0.00017427590501029044, 0.00019160745432600379, 0.00023986583983059973, 0.00050515943439677358, 5.0835962611017749e-05, 0.00022108049597591162, 0.00018205893866252154, 0.00014110709889791906, 0.0002259106986457482, 0.00012463355960790068, 0.00013861863408237696, 0.00012670934665948153, 0.00010251452476950362, 0.00011100694973720238, 0.00018070916121359915, 0.00024275995383504778, 0.00014564052980858833, 0.00022277291282080114, 0.00014069733151700348, 0.0001338923757430166, 0.00046268146252259612, 0.027665337547659874, 8.2805636338889599e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -20,1,-20,111,-13,27,-64,-61,19,-6,99,-7,6,-7,-6,58,6,15,-37,7,76,0,36,-39,2,19,40,51,18,15,23,50,-3,29,7,-15,3,51,-81,-27,26,12,28,16,-84,-61,26,-5,-11,-21,-9,-6,49,4,-9,3,-1,-32,22,-33,26,-1,127,23,-13,-11,12,-44,71,39,-9,-7,69,-31,66,5,19,-127,33,66,2,20,127,-9,36,26,-33,-18,41,-7,-18,84,1,17,-3,12, -50,8,-8,14,55,-7,-12,-127,38,12,-127,-5,-14,-10,2,97,18,-30,-10,-15,76,-97,127,25,-61,-31,-106,-15,33,38,-50,19,126,14,-14,-1,-27,127,-68,-127,11,-18,-32,12,44,-127,127,-43,-74,50,49,6,39,-67,35,57,41,41,-99,86,127,34,10,-27,44,-38,-93,-2,39,-30,-20,51,-55,-51,103,-5,-28,-60,-27,65,-66,70,-14,11,-10,45,56,-39,-25,48,-13,72,-127,-33,23,-127, -1,-7,-25,-72,14,21,37,21,-3,-2,1,63,4,-9,-16,12,-15,15,-22,18,8,27,25,-32,-1,-31,7,15,-4,9,47,-76,45,22,16,-23,11,5,-30,-25,11,6,-20,6,23,-42,20,0,8,-6,6,-3,6,5,-4,10,-5,44,7,3,10,-16,7,-23,-29,-17,28,-45,-104,-10,32,-22,-127,-24,-11,16,10,-15,10,13,-18,21,-39,0,-38,19,22,34,-25,-18,24,-9,15,7,-2,-48, 
  /* [0][1][][] */ -42,55,-18,41,-86,-14,-10,-47,26,96,-45,-17,-31,-24,-9,73,127,-25,-92,-11,59,-127,-27,14,-37,-45,-127,-6,41,39,-51,27,-127,-73,-60,2,69,-6,-58,45,-15,85,1,5,35,-52,-11,-31,127,48,1,19,44,8,-38,-18,33,11,-127,127,-45,-89,19,127,-63,-36,-78,127,-35,127,-28,56,-37,-56,30,10,-32,-69,127,45,127,34,10,0,127,26,-95,48,-37,-32,-109,39,99,98,28,-59, 127,127,127,127,-43,-127,127,25,127,-127,15,-127,-105,127,127,127,-14,-127,-57,-127,127,24,-66,127,127,127,-55,-127,127,127,-127,127,-5,-127,-123,127,-127,-50,115,103,-127,-127,127,127,127,-115,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,45,-116,-28,-65,-73,127,127,-63,123,127,-105,-127,127,-45,127,-127,-127,-127,119,-73,127,-38,127,83,127,-38,-127,-26,-106,-127,-127,-22,-127,-19,-127,-127,122, -24,65,-38,6,127,69,-24,50,6,26,-16,-1,-25,-28,-15,-3,-103,-23,-127,38,30,81,-13,-119,-36,-39,123,72,14,43,73,8,124,-43,127,-4,59,3,-96,12,39,24,-24,7,-20,-56,-13,-42,81,15,-9,39,-3,-3,-75,-12,30,19,126,-83,-1,127,4,-41,-114,-28,-76,102,18,-19,100,25,-29,-55,8,48,-27,-14,-44,2,-46,0,45,25,-87,34,127,-46,30,-21,127,-7,-110,37,33,19, 
  /* [0][2][][] */ -6,-40,-22,-57,-10,19,44,30,-7,10,-26,55,25,-36,-10,15,40,3,7,20,-9,31,-16,-26,-1,-26,9,4,-7,0,48,-76,-41,65,-32,-26,33,-42,-81,13,12,13,-34,14,14,-87,-14,-1,-8,12,18,-10,9,1,-23,10,0,48,-50,34,-6,-12,3,18,-7,-10,13,-50,-54,14,-26,-13,-122,-39,-7,21,15,-15,56,11,26,25,-43,12,13,26,-26,11,-3,30,14,-8,18,38,-7,-31, -29,-13,-29,30,-46,75,-27,64,-2,-5,49,-9,127,-9,-22,-5,0,-40,-54,21,-21,79,-42,-114,-51,-47,101,69,17,49,50,-1,-126,59,-12,-23,-27,-28,-127,-4,45,-12,-14,32,-22,-44,-22,-46,-61,34,72,22,-9,-82,30,56,19,25,73,-53,25,-58,-10,2,19,-25,-127,-56,-8,-27,-53,25,30,-50,-31,-12,-44,17,-58,2,50,42,16,10,5,61,-100,127,13,123,-34,-16,112,-21,46,85, -9,-33,-28,34,11,63,-47,14,2,-4,2,18,14,-51,-14,-3,-43,-4,14,21,-23,6,-24,3,-8,22,1,48,1,3,34,31,16,45,21,-23,-3,-29,-28,8,12,-8,24,9,-70,-41,-19,5,-3,-18,-1,-3,-6,9,-16,0,3,-51,14,-30,-24,48,8,-29,-12,-3,26,-49,49,3,58,-21,27,-55,-19,21,11,7,-8,22,-28,35,95,-9,-17,54,34,-6,111,16,1,-15,12,-20,-7,-52, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0066823381930589676, 0.0042683463543653488, 0.0079173892736434937, 0.0014170455979183316, 0.0060548293404281139, 0.0072618220001459122, 0.018222315236926079, 0.0028533993754535913, 0.0047499551437795162, 0.018136445432901382, 0.0079224091023206711, 0.012304368428885937, 0.0051561752334237099, 0.02118288166821003, 0.0070962510071694851, 0.005112131591886282, 0.0045137694105505943, 0.012709077447652817, 0.0027349404990673065, 0.016102781519293785, 0.0012762595433741808, 0.0070668985135853291, 0.0058150719851255417, 0.0145888552069664, 0.010924868285655975, 0.010508679784834385, 0.0056571625173091888, 0.010226486250758171, 0.0080153113231062889, 0.0048430929891765118, 0.0047347708605229855, 0.0066481647081673145, 0.004990636371076107, 0.0065706255845725536, 0.0081412000581622124, 0.0074581410735845566, 0.019070081412792206, 0.004681677557528019, 0.0023775894660502672, 0.0079020941630005836, 0.0074596605263650417, 0.012846445664763451, 0.016682475805282593, 0.0073262141086161137, 0.0068186535499989986, 0.0026352715212851763, 0.0084983492270112038, 0.0074356789700686932, 0.0037664535921066999, 0.0066736103035509586, 0.0067009516060352325, 0.010283163748681545, 0.0089142601937055588, 0.0096778357401490211, 0.010217707604169846, 0.016749020665884018, 0.018409544602036476, 0.010194993577897549, 0.0043715396896004677, 0.0030982359312474728, 0.010576167143881321, 0.0061242915689945221, 0.01279066875576973, 0.0053578903898596764, 0.0087070027366280556, 0.0086155198514461517, 0.0036531111691147089, 0.0039386213757097721, 0.012352273799479008, 0.010485769249498844, 0.011536003090441227, 0.0047247684560716152, 0.0085652740672230721, 0.0074067255482077599, 0.0081433169543743134, 0.010194297879934311, 0.021469276398420334, 0.0021605284418910742, 0.0093959206715226173, 0.0077375047840178013, 0.0059970514848828316, 0.0096012046560645103, 0.0052969260141253471, 0.0058912918902933598, 0.0053851474076509476, 0.0043568671680986881, 0.0047177951782941818, 0.0076801395043730736, 0.010317297652363777, 0.0061897225677967072, 0.00946784857660532, 0.0059796366840600967, 0.0056904261000454426, 0.019663961604237556, 1.1757768392562866, 0.0035192393697798252, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 14495, 1250, 6773, -620, 4243, 5345, 20659, 12107, -1095, 14715, 7709, 1378, 7579, 25688, -174, -2068, 12325, 11798, 2227, -306, -574, 12083, 4848, 4058, 10754, 7153, 5261, 4929, 57, -308, 9251, 11812, 15564, 2567, 6111, -750, 20388, 7336, 799, 6211, 782, 10449, 17228, 3892, 4018, 16513, 18565, 7193, 5536, 3502, 91, -1091, 19384, 10018, 8212, 22491, -423, 12218, 3031, 3959, 17723, 5008, 2338, 8977, 6070, 6800, 6282, -889, 17359, 6556, 12067, -1584, -1693, 6617, 2185, 3409, 22693, 15517, 14948, -2200, 4626, -3580, -2406, 432, 5725, 4703, 5031, 4732, 10809, 4819, 14822, 5153, 23723, 20956, -10204, 17418, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018575401918496937, 0.00026412346051074564, 0.00019923564104828984, 0.0010184228885918856, 0.00033896809327416122, 0.0001782251347322017, 0.00015368340245913714, 0.00029037322383373976, 0.00039099738933146, 0.0001266777835553512, 0.00017937064694706351, 0.00050781579921022058, 0.00034913880517706275, 0.00018550896493252367, 0.00027158248121850193, 0.00032400013878941536, 0.0001848940592026338, 0.00019614979100879282, 0.00018150692631024867, 0.00032609151094220579, 0.00028175621991977096, 0.00019884439825545996, 0.00029329338576644659, 0.00020145896996837109, 0.00016283622244372964, 0.00028265963192097843, 0.0002729615371208638, 0.00019064190564677119, 0.00044385212822817266, 0.00032774914870969951, 0.0001609297760296613, 0.00016278969997074455, 0.00013133480388205498, 0.00044611675548367202, 0.00028274842770770192, 0.00041771613177843392, 0.00011298157915007323, 0.00035453503369353712, 0.00050651823403313756, 0.00017717285663820803, 0.00059175537899136543, 0.00017632602248340845, 0.0001217419485328719, 0.00018922986055258662, 0.00028941044001840055, 0.00019664775754790753, 0.00015462406736332923, 0.00020938598026987165, 0.00029234468820504844, 0.00027124598273076117, 0.00062453595455735922, 0.00064339517848566175, 0.00013882519851904362, 0.00016370380762964487, 0.00028696664958260953, 8.2211838162038475e-05, 0.00036857769009657204, 0.00014548897161148489, 0.00025819026632234454, 0.00042260863119736314, 9.7979485872201622e-05, 0.00026248826179653406, 0.00043042315519414842, 0.00030714453896507621, 0.00017734295397531241, 0.0001615234068594873, 0.00031620540539734066, 0.00035946237039752305, 0.00015322027320507914, 0.00018724265100900084, 0.00017103385471273214, 0.00025070941774174571, 0.00024863393628038466, 0.00020370434504002333, 0.00023641141888219863, 0.00038305652560666203, 0.00010288734483765438, 0.00028757605468854308, 0.00011210300726816058, 0.00052884826436638832, 0.00022808433277532458, 0.00053294241661205888, 0.00017229917284566909, 0.00044658067054115236, 0.00026029153377749026, 0.00032081388053484261, 0.00031494529685005546, 0.00028817524434998631, 0.00015484870527870953, 0.0003180839994456619, 0.0001059307178365998, 0.00032504418049938977, 8.995368261821568e-05, 0.00013610921450890601, 0.00028888872475363314, 0.00018889110651798546, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 17,-33,64,93,68,-84,12,-78,127,-6,-66,-75,37,54,-16,-76, 
  /* [1][0][][] */ -2,76,27,-3,61,-42,23,0,106,30,-14,127,34,-27,95,-61, 
  /* [2][0][][] */ 35,-79,12,-23,-22,46,-9,66,-1,-21,16,63,-28,-103,127,-101, 
  /* [3][0][][] */ 127,83,-1,0,-68,-45,-46,-39,22,12,86,-47,-29,62,-10,-36, 
  /* [4][0][][] */ -51,-37,-9,77,-20,92,-5,75,-55,-79,-31,11,-11,-127,59,42, 
  /* [5][0][][] */ 112,-52,-47,4,-17,-93,-23,34,-7,3,-127,12,38,2,28,50, 
  /* [6][0][][] */ -127,-67,7,33,-57,-75,-39,10,-36,-57,-19,-50,57,49,33,63, 
  /* [7][0][][] */ -5,27,-92,86,26,-127,-76,79,20,-119,-10,7,8,57,-39,-5, 
  /* [8][0][][] */ 44,-23,-29,10,-6,4,-70,-40,-22,15,-72,-14,-127,33,19,27, 
  /* [9][0][][] */ 39,-24,61,68,-6,-16,14,-79,127,-65,1,-19,-8,27,-92,48, 
  /* [10][0][][] */ -53,-58,58,-66,92,64,25,70,127,-24,-58,37,51,-75,-74,73, 
  /* [11][0][][] */ 47,4,-127,20,18,22,-3,68,-44,5,13,-10,-21,27,-53,20, 
  /* [12][0][][] */ 127,-5,-10,-22,6,-81,-28,16,-8,23,-122,-5,-34,-45,22,57, 
  /* [13][0][][] */ 44,-60,12,9,27,-1,-127,-87,14,-41,-11,-8,57,40,19,-25, 
  /* [14][0][][] */ -24,32,-85,-29,71,-127,35,-52,66,18,-8,-89,40,100,17,23, 
  /* [15][0][][] */ 19,-15,43,48,32,-52,-48,-1,2,-82,-47,-1,-127,-42,-31,64, 
  /* [16][0][][] */ -43,117,-16,20,-6,127,97,95,-14,51,84,19,-10,23,13,-67, 
  /* [17][0][][] */ -11,-13,-45,-37,-52,35,56,52,-8,127,-5,-3,-32,63,72,2, 
  /* [18][0][][] */ 16,114,-37,-20,33,-9,54,-63,37,100,-55,127,8,-38,37,-83, 
  /* [19][0][][] */ 14,-16,48,54,-1,67,3,34,40,18,-68,-6,-127,22,-34,39, 
  /* [20][0][][] */ 91,-78,-12,-91,-15,-1,1,-104,-54,9,-127,-39,6,33,99,13, 
  /* [21][0][][] */ 28,-8,127,35,-10,39,28,5,18,25,-19,5,-5,46,6,3, 
  /* [22][0][][] */ 44,-1,4,-31,-76,-17,69,127,10,44,-27,-28,23,34,113,25, 
  /* [23][0][][] */ -15,37,-120,18,-15,-127,38,35,-3,20,-24,-10,-80,-17,-6,56, 
  /* [24][0][][] */ 30,-54,-21,-74,27,-61,-48,-15,14,14,66,66,-7,90,127,61, 
  /* [25][0][][] */ -104,-77,-28,-11,49,-74,-3,-101,-69,-64,-127,52,60,36,47,63, 
  /* [26][0][][] */ 23,-23,84,6,-25,8,-24,75,-71,-104,3,-17,13,-127,26,-43, 
  /* [27][0][][] */ -83,28,-56,59,41,5,-30,16,38,-39,127,19,-34,1,-31,-58, 
  /* [28][0][][] */ -22,2,23,51,-18,7,13,80,27,20,-22,-28,-127,-2,-20,47, 
  /* [29][0][][] */ -6,41,45,-44,52,6,20,-52,-127,41,-13,-6,-5,26,-68,-14, 
  /* [30][0][][] */ 16,-38,-127,-42,3,-77,68,58,-19,-40,-28,-12,-51,-88,3,3, 
  /* [31][0][][] */ 127,-27,-89,9,71,43,-47,105,29,44,-109,25,-7,-35,-81,94, 
  /* [32][0][][] */ -127,24,0,49,6,27,-4,41,-25,-14,94,4,-31,18,-2,1, 
  /* [33][0][][] */ 4,-41,127,-34,-55,32,-5,-40,32,3,-29,21,-34,23,37,-2, 
  /* [34][0][][] */ -31,-21,17,-127,72,-17,-36,-33,21,-6,-24,-75,-18,37,23,36, 
  /* [35][0][][] */ -28,6,45,62,58,-20,10,-39,-127,6,43,63,-10,121,-65,-16, 
  /* [36][0][][] */ -80,62,-16,26,-1,19,51,113,12,40,127,32,7,29,52,-23, 
  /* [37][0][][] */ -50,8,127,-54,-24,-99,32,-60,17,18,8,32,9,-61,66,7, 
  /* [38][0][][] */ 18,2,9,24,31,-63,-38,31,17,-7,42,11,127,25,-41,-11, 
  /* [39][0][][] */ -10,13,-9,-45,-24,-81,-14,92,-63,-66,-16,-20,0,38,127,68, 
  /* [40][0][][] */ 46,10,-19,1,12,127,-4,38,-12,46,30,-2,115,2,-44,-8, 
  /* [41][0][][] */ -1,-31,-15,-127,26,-22,-17,-55,33,-22,16,-49,1,-6,-9,46, 
  /* [42][0][][] */ 23,34,-7,127,-57,-43,-90,4,-49,-59,116,-119,-22,101,-21,5, 
  /* [43][0][][] */ -4,100,-16,127,25,24,30,-31,-34,103,19,51,4,-3,-4,28, 
  /* [44][0][][] */ -18,-29,-127,22,52,118,-26,69,-24,32,16,-39,-20,-46,-73,19, 
  /* [45][0][][] */ 7,-6,-11,-127,-2,60,19,16,-10,-7,-108,38,-72,-123,42,-2, 
  /* [46][0][][] */ 19,37,106,-10,-2,36,-20,57,44,-38,-24,-42,22,127,58,-32, 
  /* [47][0][][] */ 16,-7,28,-77,-32,31,-36,38,-10,-15,24,47,-3,-127,29,34, 
  /* [48][0][][] */ 5,-11,8,-127,-5,4,-18,5,-4,-34,24,-1,-32,51,7,60, 
  /* [49][0][][] */ 28,-6,-12,124,104,5,-28,43,-68,10,1,39,-33,40,127,-3, 
  /* [50][0][][] */ -2,-23,36,-39,23,127,-52,-93,39,-34,94,66,62,-33,-2,-95, 
  /* [51][0][][] */ 21,52,32,42,-9,23,-34,33,56,10,-6,127,13,43,2,-13, 
  /* [52][0][][] */ 8,73,120,7,20,-15,1,-40,-41,18,11,82,-9,51,-127,-25, 
  /* [53][0][][] */ 22,-15,-88,-127,-19,7,32,-17,-9,71,34,41,52,-27,56,60, 
  /* [54][0][][] */ 7,32,-15,-71,38,55,-22,13,49,-12,1,-24,-92,127,2,27, 
  /* [55][0][][] */ 39,-58,-67,-29,42,-19,30,-127,18,-112,-28,13,-86,-115,-43,-88, 
  /* [56][0][][] */ 34,57,18,46,1,-6,9,127,1,-37,15,-14,75,-9,-47,20, 
  /* [57][0][][] */ 92,-5,110,-76,-127,-87,-15,-98,-28,-28,-53,-77,23,-59,57,-88, 
  /* [58][0][][] */ 103,114,43,127,-126,-22,-28,23,-14,-44,56,25,-59,-49,-61,-67, 
  /* [59][0][][] */ 127,-34,7,18,-13,-29,-39,-13,-20,2,-102,-2,-6,-14,33,-12, 
  /* [60][0][][] */ -127,70,1,-12,69,-4,25,-11,10,37,86,40,-20,-35,71,-58, 
  /* [61][0][][] */ -92,50,16,0,65,-14,-72,-67,49,-127,56,-23,-1,-36,-101,-22, 
  /* [62][0][][] */ -14,-12,-98,28,105,127,-13,70,12,-31,13,1,-78,-20,-62,-12, 
  /* [63][0][][] */ -4,6,127,-81,-32,-90,9,-46,-5,47,24,5,-36,-62,100,10, 
  /* [64][0][][] */ 27,13,-53,23,-10,-47,75,-127,46,46,-9,-41,55,-66,38,73, 
  /* [65][0][][] */ 26,28,-1,17,94,-8,-58,-127,-77,-124,-46,-38,-9,-40,71,32, 
  /* [66][0][][] */ -127,-4,-17,1,-65,8,29,-8,-36,-1,-67,49,86,24,32,77, 
  /* [67][0][][] */ -4,-61,23,115,22,-10,-40,43,49,13,-19,-4,1,-39,-127,-71, 
  /* [68][0][][] */ 29,4,33,127,-2,25,8,-5,-28,16,-29,52,-53,-73,-53,-31, 
  /* [69][0][][] */ 26,25,42,127,-28,0,63,-58,61,37,-18,37,5,3,1,9, 
  /* [70][0][][] */ 77,-127,103,-63,95,-30,-35,1,106,-30,42,-79,-6,101,32,81, 
  /* [71][0][][] */ 15,28,35,118,45,-127,-37,107,38,-106,10,3,41,-49,-64,21, 
  /* [72][0][][] */ -127,-57,-18,39,4,9,-1,-4,-15,3,-61,38,59,15,-20,60, 
  /* [73][0][][] */ -89,-50,-1,94,38,70,104,-3,127,114,-22,-32,48,111,-117,-96, 
  /* [74][0][][] */ 81,-35,13,-20,-22,-13,17,-4,-6,-42,-71,12,-127,9,39,12, 
  /* [75][0][][] */ -12,-21,-38,127,-27,15,1,-16,-76,-6,0,-33,11,-45,-9,-37, 
  /* [76][0][][] */ 22,17,-3,37,60,31,-3,-127,17,-108,3,43,-26,-43,44,-48, 
  /* [77][0][][] */ 127,-14,51,52,-42,-19,7,-2,96,-7,-24,58,26,21,-87,32, 
  /* [78][0][][] */ 5,20,56,58,13,-15,-38,-23,127,10,-79,19,31,51,67,-47, 
  /* [79][0][][] */ 14,19,54,28,31,80,-81,-48,-16,-73,73,-36,127,-16,-27,-52, 
  /* [80][0][][] */ -90,-115,-86,127,7,84,-7,5,-103,-40,-79,25,28,-57,2,39, 
  /* [81][0][][] */ 57,-11,-53,43,120,101,29,-24,4,-113,-12,-112,-41,15,-127,-15, 
  /* [82][0][][] */ 74,70,9,69,-127,-32,-44,-25,-37,-4,94,-63,-15,63,-5,-57, 
  /* [83][0][][] */ 127,71,11,-5,-8,-26,-12,42,59,18,79,1,-34,-34,-22,-88, 
  /* [84][0][][] */ -7,-23,-68,7,40,51,-9,-127,-27,-55,17,22,-17,-7,-29,-15, 
  /* [85][0][][] */ -25,16,-62,-68,8,8,31,127,-47,122,-10,-49,-5,90,88,-40, 
  /* [86][0][][] */ 47,-14,-34,-9,5,-46,-16,-45,20,-3,-127,7,8,14,0,45, 
  /* [87][0][][] */ -20,48,7,-17,-41,97,-93,107,-44,-57,100,22,-26,-127,-28,1, 
  /* [88][0][][] */ -27,-71,-127,4,58,-39,-74,-87,2,-29,-21,-48,48,37,23,1, 
  /* [89][0][][] */ 48,18,-17,-127,-21,-13,-71,38,15,-119,-29,5,-53,-24,39,90, 
  /* [90][0][][] */ -3,61,-66,118,15,-8,127,-65,123,102,-46,35,64,58,-60,10, 
  /* [91][0][][] */ 13,-6,-60,-20,7,-127,-32,-28,-19,-14,-72,5,49,-2,25,31, 
  /* [92][0][][] */ 42,47,103,116,7,44,-7,89,-56,10,-115,78,30,127,33,42, 
  /* [93][0][][] */ 127,-12,-32,2,-14,-35,-23,40,-41,-1,-86,16,-3,18,-17,51, 
  /* [94][0][][] */ 24,-28,53,93,111,-26,-13,69,0,-16,-10,68,0,127,-33,-77, 
  /* [95][0][][] */ -117,50,26,54,4,62,12,10,2,18,127,-31,-23,31,-29,-23, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00063282257178798318, 0.00089980982011184096, 0.00067875144304707646, 0.0034695398062467575, 0.0011547887697815895, 0.00060717330779880285, 0.00052356510423123837, 0.00098923686891794205, 0.0013320409925654531, 0.00043156297761015594, 0.00061107584042474627, 0.0017300152685493231, 0.0011894381605088711, 0.00063198769930750132, 0.00092522101476788521, 0.0011037962976843119, 0.00062989286379888654, 0.00066823861561715603, 0.00061835366068407893, 0.0011109211482107639, 0.00095988065004348755, 0.00067741854581981897, 0.00099918525665998459, 0.00068632583133876324, 0.0005547467153519392, 0.00096295838011428714, 0.0009299191297031939, 0.00064947450300678611, 0.001512105343863368, 0.0011165683390572667, 0.00054825190454721451, 0.00055458821589127183, 0.00044742843601852655, 0.0015198204200714827, 0.00096326094353571534, 0.0014230657834559679, 0.00038490307633765042, 0.0012078218860551715, 0.0017255948623642325, 0.00060358847258612514, 0.0020159787964075804, 0.00060070346808061004, 0.00041474768659099936, 0.00064466398907825351, 0.00098595686722546816, 0.00066993507789447904, 0.00052676972700282931, 0.00071333139203488827, 0.0009959532180801034, 0.00092407467309385538, 0.0021276548504829407, 0.0021919040009379387, 0.00047294652904383838, 0.00055770238395780325, 0.00097763142548501492, 0.00028007742366753519, 0.0012556620640680194, 0.00049564853543415666, 0.00087959668599069118, 0.0014397334307432175, 0.00033379427623003721, 0.00089423905592411757, 0.0014663557521998882, 0.0010463730432093143, 0.0006041679298505187, 0.00055027427151799202, 0.0010772413806989789, 0.0012246081605553627, 0.00052198732737451792, 0.00063789397245272994, 0.00058267422718927264, 0.00085411116015166044, 0.00084704038454219699, 0.00069397530751302838, 0.00080540101043879986, 0.0013049882836639881, 0.00035051425220444798, 0.00097970757633447647, 0.00038190998020581901, 0.0018016682006418705, 0.00077703251736238599, 0.0018156160367652774, 0.0005869849119335413, 0.0015214008744806051, 0.00088675529696047306, 0.001092941383831203, 0.0010729484492912889, 0.00098174880258738995, 0.00052753504132851958, 0.0010836413130164146, 0.00036088234628550708, 0.0011073531350120902, 0.00030645215883851051, 0.00046369378105737269, 0.00098417955450713634, 0.00064350990578532219, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -34105, 4203, 4084, -8766, -1528, -4950, -9986, -38300, 2856, 18602, 32556, -9708, 1603, -21185, 45638, -49454, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00057318736799061298, 0.00077984231757000089, 0.0010140768717974424, 0.00086263357661664486, 0.00087200588313862681, 0.001035341527312994, 0.00084846967365592718, 0.00062426773365586996, 0.00066673848778009415, 0.00059292744845151901, 0.00078837160253897309, 0.00059251440688967705, 0.0010626550065353513, 0.0011584601597860456, 0.00047106007696129382, 0.000569046416785568, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -16,-10,-12,14,24,4,-5,95,-50,20,15,-5,34,-16,3,21,12,9,-9,-8,68,-11,24,123,-26,83,-10,-13,35,-27,31,-32,-36,59,5,-34,0,46,21,-11,-105,-23,17,49,60,20,-127,-58, 
  /* [1][0][][] */ -38,-2,14,15,-26,9,-7,60,-51,-22,6,-39,-28,2,5,-14,-14,102,-17,12,0,11,-32,-18,24,-49,6,21,-24,-80,-37,-11,-9,-3,37,-7,-1,-37,2,2,-18,-32,127,19,12,-12,16,-15, 
  /* [2][0][][] */ -24,-13,-2,-39,-9,-67,4,-16,-1,11,10,19,20,8,-12,17,-12,-22,-14,-9,-8,3,-13,-127,-14,80,-12,9,9,-16,5,5,-18,48,6,-5,15,12,21,3,-40,3,-20,-6,-5,-14,10,9, 
  /* [3][0][][] */ -8,54,17,-39,-16,0,-1,8,-26,5,-3,39,-127,19,-4,7,4,2,-19,-5,-32,-2,-2,17,-14,-11,4,25,-3,8,0,3,0,11,21,22,-11,22,45,7,12,-4,23,-34,12,-10,10,23, 
  /* [4][0][][] */ 35,-34,13,13,32,19,24,-27,-35,-7,-11,-29,3,-7,6,6,18,-12,-78,7,-11,16,12,75,-5,-16,-4,48,8,-74,19,7,8,-39,35,-127,24,24,-3,18,-19,25,8,-24,-8,-11,2,10, 
  /* [5][0][][] */ 30,1,-22,64,4,-11,17,21,-8,0,36,13,1,59,6,3,-37,20,31,4,15,12,10,-24,3,-43,12,-22,-13,-16,1,-1,57,-127,8,29,-21,-18,18,7,-97,56,25,-7,-2,-5,-114,-15, 
  /* [6][0][][] */ 26,-13,8,1,-10,2,11,-10,-2,-11,-11,-3,-20,10,7,2,-14,-2,127,-7,7,13,23,-39,20,3,36,-13,-11,-2,4,9,-11,-8,28,-34,-9,-33,81,22,-3,-11,-6,6,-10,2,3,-3, 
  /* [7][0][][] */ -49,-6,-17,34,-21,76,-19,33,3,39,2,127,76,-3,6,-11,-8,-22,4,-13,-27,-8,-18,57,-10,-40,-42,-28,-7,-13,-9,-22,8,-5,-24,5,6,-57,80,-16,13,42,-53,-45,8,-9,2,-4, 
  /* [8][0][][] */ -56,-51,13,-6,-22,0,-7,44,-1,-71,18,45,48,20,-3,8,-10,54,-25,-2,-41,19,-18,-15,4,5,15,43,-3,117,-32,20,-3,12,-20,-127,-102,61,31,25,16,-9,112,-32,3,27,26,38, 
  /* [9][0][][] */ -30,-4,-20,42,28,-35,15,3,71,-49,15,54,-59,-7,20,-7,-7,22,-31,-20,42,17,-6,-19,5,7,43,-30,24,8,16,16,-8,13,78,-98,6,-127,-96,26,-28,30,50,14,-16,12,-23,-43, 
  /* [10][0][][] */ -18,-12,-24,-127,48,78,23,-3,2,26,27,11,51,-67,-32,33,28,-36,60,-25,47,-18,38,57,-51,-97,1,-30,48,29,50,-31,-24,-71,18,6,25,-44,-2,-21,-34,-79,-14,9,14,18,4,-58, 
  /* [11][0][][] */ -2,44,-23,48,22,-60,-50,-1,3,62,8,-8,-4,80,-9,-58,0,44,9,-16,-68,-90,8,1,7,-25,37,-22,45,-35,3,-62,46,-9,-37,-90,81,17,10,-127,-2,54,93,-76,-15,-45,31,29, 
  /* [12][0][][] */ 127,-13,-9,12,-7,23,-7,101,28,-18,-48,-16,-1,18,1,4,-15,15,-9,1,8,-4,-4,18,3,-1,4,3,-7,9,-5,-5,6,-54,-15,12,-20,-12,-32,-3,-12,-82,5,-112,-49,-2,83,6, 
  /* [13][0][][] */ 4,6,-2,4,8,-10,-3,-3,2,2,12,27,-7,-4,8,-2,2,0,8,-2,8,-16,1,-4,1,-5,12,127,13,4,8,-2,3,1,-36,25,11,-5,2,-15,-14,-4,6,3,-8,3,-2,-18, 
  /* [14][0][][] */ 81,-19,59,-61,65,21,8,-108,-47,-45,11,127,-66,-2,77,-1,55,23,-73,64,11,27,55,-8,29,31,-26,-100,23,-34,61,28,13,87,-126,-62,-35,52,70,-8,-15,-6,57,25,11,-31,23,-9, 
  /* [15][0][][] */ -10,-51,-62,-32,81,29,50,-51,18,42,-2,-15,101,14,-106,63,70,70,82,-103,-97,-33,49,-16,-103,36,28,68,67,61,44,-58,43,55,79,126,-14,-127,-19,-49,96,72,110,-48,-15,-24,-9,62, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.02436046302318573, 0.033143296837806702, 0.043098267167806625, 0.036661926656961441, 0.037060249596834183, 0.044002015143632889, 0.036059960722923279, 0.02653137780725956, 0.028336385264992714, 0.025199415162205696, 0.033505793660879135, 0.025181861594319344, 0.045162837952375412, 0.049234554171562195, 0.020020052790641785, 0.024184472858905792, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 12654, 33250, -1473, 47359, 4851, 124952, -2464, 57337, 1591, 29814, 15370, -2993, 1618, 29770, 1761, -526, -409, -1704, 2991, -1479, 1727, -3850, -1247, -17338, -2230, 52244, 145937, 105959, 2965, 937, -2353, 272, 19729, 3000, 40595, -16484, 37939, -352, 67020, 689, 6038, 66136, 724, 7630, 57169, 140, 173, 48576, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.1614428230095655e-05, 3.5183373256586492e-05, 0.00018229825946036726, 5.055175643065013e-05, 0.0001739586004987359, 6.3064770074561238e-05, 0.00013031486014369875, 9.4935850938782096e-05, 9.9782671895809472e-05, 3.8782862247899175e-05, 2.9583650757558644e-05, 0.00012348825111985207, 4.2453080823179334e-05, 4.0787592297419906e-05, 0.0001523855171399191, 0.00023370503913611174, 0.0001661903370404616, 7.58773458073847e-05, 0.0001006681050057523, 0.00018619315233081579, 8.0671939940657467e-05, 0.00019885582150891423, 9.575182048138231e-05, 0.00010775386908790097, 0.00016440947365481406, 8.3595725300256163e-05, 3.5033721360377967e-05, 6.3912055338732898e-05, 0.00013985263649374247, 0.00012267178681213409, 0.00011641802848316729, 0.00015117097063921392, 3.8740090531064197e-05, 9.7254531283397228e-05, 2.8934116926393472e-05, 7.0560585299972445e-05, 0.00015330321912188083, 9.2038942966610193e-05, 7.9938385169953108e-05, 9.607763058738783e-05, 7.2723130870144814e-05, 8.4852064901497215e-05, 8.6681204265914857e-05, 7.1952272264752537e-05, 2.8145677788415924e-05, 0.00014202541206032038, 0.00010423808271298185, 3.61928905476816e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 71,-96,97,74,54,-33,104,-67,64,-93,-81,48,55,-44,-75,-91,101,79,51,78,70,-71,-81,53,-37,-42,-69,-66,-68,61,-63,-114,-14,43,71,68,-62,55,-48,-22,51,-74,57,61,-90,12,83,-36, 85,-99,127,87,-79,-68,-60,-87,100,-99,-68,75,80,-107,-96,88,-39,95,78,127,88,-113,56,70,-53,-75,-72,-82,55,81,-31,-127,-86,80,82,86,-81,86,-79,-17,78,-95,80,90,-75,-127,96,-109, 31,-55,67,38,16,-39,-51,-42,42,-37,6,37,32,-81,-59,-4,-54,34,37,70,34,-52,34,24,-31,-43,-45,-23,34,35,89,-89,-94,45,38,39,-30,48,-40,-10,41,-48,36,49,-15,-10,37,-84, 
  /* [0][1][][] */ 98,-116,-40,98,55,-82,127,-92,83,-114,-72,84,90,-107,-14,-127,127,105,77,-39,85,109,-127,74,73,-77,-99,-98,-127,86,-70,-10,-89,73,109,96,-85,81,-82,88,87,-106,88,93,-83,107,92,-94, 127,-127,-64,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-23,93,-68,127,127,-53,127,127,71,127,127,-127,-127,-127,50,127,-28,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 67,-84,-34,66,40,-61,-51,-64,60,-38,-62,63,51,-52,-19,8,-63,48,60,-32,56,66,53,64,65,-66,-62,-43,39,58,127,14,-64,68,49,52,-54,63,-61,56,61,-65,52,67,-63,-67,62,-58, 
  /* [0][2][][] */ 44,-56,-50,54,27,-52,61,-43,44,-75,-6,44,61,-64,82,-78,73,51,34,-36,29,-10,-79,30,-30,-44,-52,-50,-76,34,-43,89,-73,36,50,44,-27,42,-47,-86,51,-57,42,48,-24,16,42,-78, 76,-79,-51,89,-58,-63,-74,-68,58,-75,-69,65,78,-48,127,31,-47,61,60,-48,58,-19,41,69,-57,-66,-85,-61,30,63,-23,114,-54,64,56,58,-51,68,-68,-106,71,-67,60,61,-86,49,67,-55, 47,-47,-29,56,28,-19,-19,-39,21,-28,-55,31,35,0,66,23,-32,24,30,-37,30,1,37,46,-32,-30,-52,-26,35,38,63,64,-1,33,17,25,-28,34,-33,-55,28,-33,28,32,-65,8,35,-2, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0021936132106930017, 0.0014952933415770531, 0.0077476757578551769, 0.0021484496537595987, 0.007393240462988615, 0.0026802527718245983, 0.0055383816361427307, 0.0040347734466195107, 0.0042407633736729622, 0.0016482715727761388, 0.0012573051499202847, 0.0052482504397630692, 0.0018042558804154396, 0.0017334726871922612, 0.0064763845875859261, 0.0099324639886617661, 0.0070630894042551517, 0.0032247870694845915, 0.0042783943936228752, 0.0079132085666060448, 0.0034285574220120907, 0.0084513723850250244, 0.0040694521740078926, 0.0045795394107699394, 0.006987402681261301, 0.0035528182052075863, 0.0014889331068843603, 0.0027162623591721058, 0.0059437369927763939, 0.0052135507576167583, 0.0049477661959826946, 0.0064247660338878632, 0.001646453863941133, 0.004133317619562149, 0.0012296999339014292, 0.0029988246969878674, 0.0065153865143656731, 0.0039116549305617809, 0.0033973811659961939, 0.0040832990780472755, 0.0030907329637557268, 0.0036062127910554409, 0.0036839509848505259, 0.0030579713638871908, 0.0011961912969127297, 0.0060360799543559551, 0.0044301184825599194, 0.0015381977427750826, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 438, 656, 2833, 256, 5710, 16099, 2147, -237, -620, -746, 1354, 1142, 2620, 692, 19952, 2885, 1819, -645, -12, 3388, -1342, 9952, 7683, 9894, 4743, 288, 3845, 3516, 7163, -426, 6551, 5805, 327, -125, 4272, 4095, -1516, 417, -660, 4929, 588, -853, -705, -72, 833, 4488, 704, 856, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00042930175550282001, 0.0010974844917654991, 0.00022151504526846111, 0.00041701400186866522, 0.00037271546898409724, 0.00024904732708819211, 0.00051498063839972019, 0.00032734376145526767, 0.00043107906822115183, 0.00069066591095179319, 0.00068144209217280149, 0.00031049130484461784, 0.00044376845471560955, 0.0011074395151808858, 0.00017963236314244568, 0.00043480130261741579, 0.00028016755823045969, 0.00040732897468842566, 0.00032396192546002567, 0.00030152910039760172, 0.00041600168333388865, 0.00024780846433714032, 0.00047898085904307663, 0.00015981160686351359, 0.00034217635402455926, 0.0003387162578292191, 0.001815226161852479, 0.00051265239017084241, 0.00024219398619607091, 0.00048318353947252035, 0.000405154685722664, 0.00022619491210207343, 0.00091540388530120254, 0.00033482533763162792, 0.00085967296035960317, 0.00048141539446078241, 0.00084800017066299915, 0.00038309930823743343, 0.00025535389431752264, 0.00037972189602442086, 0.00019729688938241452, 0.00025875569554045796, 0.00037608292768709362, 0.00033059899578802288, 0.0023271499667316675, 0.00031424281769432127, 0.00033262130455113947, 0.0013192817568778992, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,6,-11,77,-38,50,22,-44, 
  /* [1][0][][] */ 43,31,35,13,1,-32,72,127, 
  /* [2][0][][] */ -94,-4,-4,8,-127,-24,1,22, 
  /* [3][0][][] */ 96,-13,-2,-118,-127,-6,37,4, 
  /* [4][0][][] */ -127,21,-12,20,60,-2,33,6, 
  /* [5][0][][] */ -99,-28,41,-12,-127,-7,-1,91, 
  /* [6][0][][] */ -18,-127,44,-12,3,-10,1,43, 
  /* [7][0][][] */ -60,8,9,109,127,-38,-21,14, 
  /* [8][0][][] */ 63,15,23,-127,5,-22,-46,-33, 
  /* [9][0][][] */ 1,-127,-31,-3,8,105,-74,98, 
  /* [10][0][][] */ -127,-13,-20,62,-126,91,115,26, 
  /* [11][0][][] */ 127,13,22,11,-63,-40,-45,-122, 
  /* [12][0][][] */ 6,23,30,-4,16,-73,127,55, 
  /* [13][0][][] */ 43,-22,-22,5,57,127,77,-35, 
  /* [14][0][][] */ 127,46,-28,11,-127,-12,-62,2, 
  /* [15][0][][] */ -14,-127,8,-20,31,38,-30,9, 
  /* [16][0][][] */ -55,-20,-20,-15,-127,-2,33,-5, 
  /* [17][0][][] */ -28,100,-109,10,-4,-127,97,-60, 
  /* [18][0][][] */ 127,-32,-49,16,-62,27,3,94, 
  /* [19][0][][] */ 127,-22,-9,-11,80,-13,13,-11, 
  /* [20][0][][] */ 112,13,4,127,11,22,4,-61, 
  /* [21][0][][] */ 20,78,-51,2,-10,49,-110,-127, 
  /* [22][0][][] */ -127,20,31,-12,-35,-1,-38,2, 
  /* [23][0][][] */ -40,-56,-1,34,-127,55,85,-19, 
  /* [24][0][][] */ 127,24,11,-25,-61,-24,-43,-27, 
  /* [25][0][][] */ 23,-29,-6,-29,127,64,45,-31, 
  /* [26][0][][] */ -25,-96,16,-46,13,-127,91,-59, 
  /* [27][0][][] */ -22,-127,36,-14,-6,-57,39,-11, 
  /* [28][0][][] */ -127,27,-3,5,-13,-6,104,78, 
  /* [29][0][][] */ -7,50,13,8,14,33,-98,-127, 
  /* [30][0][][] */ 127,-36,-6,18,-62,18,-21,-3, 
  /* [31][0][][] */ 14,-24,44,-6,2,-92,127,42, 
  /* [32][0][][] */ -63,11,7,20,-127,-72,-102,65, 
  /* [33][0][][] */ -26,15,0,16,-127,-46,-41,16, 
  /* [34][0][][] */ 20,-127,44,-15,-9,85,-77,49, 
  /* [35][0][][] */ -20,-45,-127,-8,3,-62,42,-58, 
  /* [36][0][][] */ 21,127,52,4,-5,13,-34,-47, 
  /* [37][0][][] */ -127,24,43,-10,52,-33,-30,-120, 
  /* [38][0][][] */ -127,-38,-43,-3,44,15,24,123, 
  /* [39][0][][] */ -19,-45,24,-5,22,-53,127,107, 
  /* [40][0][][] */ -34,-22,2,-33,-127,126,124,-23, 
  /* [41][0][][] */ -127,40,4,-74,-104,-81,-93,52, 
  /* [42][0][][] */ -42,-127,-92,-14,-15,80,-115,-89, 
  /* [43][0][][] */ -73,12,-12,-127,84,62,54,1, 
  /* [44][0][][] */ 127,2,2,-71,8,-30,-35,30, 
  /* [45][0][][] */ -65,-127,-6,-37,-30,-88,124,31, 
  /* [46][0][][] */ 111,-14,-30,-20,127,-20,-30,7, 
  /* [47][0][][] */ 127,7,-8,112,-21,32,13,-45, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070077442796900868, 0.001791488379240036, 0.00036159201408736408, 0.0006807164172641933, 0.0006084053311496973, 0.00040653455653227866, 0.00084063311805948615, 0.0005343424272723496, 0.00070367567241191864, 0.0011274145217612386, 0.001112357946112752, 0.00050683319568634033, 0.00072438927600160241, 0.0018077384447678924, 0.00029322443879209459, 0.00070975167909637094, 0.00045733395381830633, 0.00066490698372945189, 0.00052882207091897726, 0.00049220363143831491, 0.00067906395997852087, 0.00040451227687299252, 0.0007818685844540596, 0.00026086985599249601, 0.00055855454411357641, 0.00055290642194449902, 0.0029631000943481922, 0.00083683256525546312, 0.00039534745155833662, 0.00078872882295399904, 0.00066135777160525322, 0.000369231216609478, 0.0014942674897611141, 0.00054655503481626511, 0.0014032946201041341, 0.00078584259608760476, 0.0013842404587194324, 0.00062535546021535993, 0.0004168291634414345, 0.00061984232161194086, 0.00032205929164774716, 0.00042238211608491838, 0.00061390222981572151, 0.00053965614642947912, 0.0037987434770911932, 0.00051295699086040258, 0.0005429572775028646, 0.0021535409614443779, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -38297, 22310, -15215, -18142, 27696, -6921, 29782, 43008, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00054247048683464527, 0.00079484540037810802, 0.0016882786294445395, 0.0016198768280446529, 0.0008997663389891386, 0.00062004709616303444, 0.00064649200066924095, 0.00088761327788233757, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -77,-10,-42,-2,16,-41,2,36,-127,115,-38,104,84,3,88,-18,4,-35,1,-25,-7,-21,-2,-15,24,-87,2,53,-34,22,15,-50,0,-63,110,2,-11,-20,16,-38,99,5,67,-14,-16,-11,2,-5, 
  /* [1][0][][] */ -1,28,127,-4,1,-32,9,-64,33,5,33,2,-32,-4,5,-107,19,-76,18,7,-52,52,18,-26,-23,-1,12,-3,19,-2,5,3,-7,16,9,8,-15,-34,73,-62,6,34,-6,34,-18,10,22,8, 
  /* [2][0][][] */ -2,-43,17,-34,30,30,2,-41,13,-2,3,16,-9,51,7,4,-39,127,-27,-27,-4,24,-37,-12,112,4,-3,0,-15,-6,5,-40,-7,-5,12,10,5,-2,-10,7,11,-23,-19,7,3,29,-23,-42, 
  /* [3][0][][] */ 3,-83,2,20,7,-2,-11,6,4,-8,14,28,20,-18,51,12,-8,-18,10,25,-22,19,-26,2,6,48,-5,2,-6,-4,127,0,13,-2,-5,-1,-25,-11,-16,11,-10,6,1,25,0,5,-1,31, 
  /* [4][0][][] */ -99,4,-8,5,2,-67,-7,1,38,-51,10,-19,-14,2,5,-4,0,2,-7,-3,12,-38,14,5,0,47,-10,104,7,-19,-16,-38,-10,-127,-36,-12,-30,-15,19,7,-42,-8,-7,8,-54,-3,1,16, 
  /* [5][0][][] */ -28,19,26,4,-36,25,15,61,4,7,-2,-1,11,-63,18,36,-2,-76,13,17,49,-58,13,25,6,19,-83,-60,-32,-31,19,-3,-17,-73,23,-63,58,3,-26,23,28,-43,11,7,127,-2,-21,3, 
  /* [6][0][][] */ -27,-11,-11,11,34,-39,-1,-32,-16,-11,47,-9,-18,45,-2,-67,-20,14,-2,-41,-31,56,-8,-71,1,-24,-71,-75,27,33,-4,14,17,-55,-33,69,-84,-41,-4,-61,-1,15,31,52,127,-37,20,15, 
  /* [7][0][][] */ 1,37,-79,33,-8,24,9,66,-9,-6,67,-35,7,-32,-6,-6,-6,-127,29,-47,62,46,10,-49,23,-27,23,-2,-16,23,-13,1,1,55,8,-22,-9,-52,-34,-65,-25,-32,41,69,-26,-14,-2,-5, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.023054994642734528, 0.033780928701162338, 0.07175184041261673, 0.068844765424728394, 0.038240067660808563, 0.02635200135409832, 0.027475910261273384, 0.037723563611507416, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -51684, -498, 10243, -888, 4594, -2004, 1271, 13618, 82, 29232, -1541, 23771, -5653, -1118, 23890, 1412, 1195, 17105, 28110, 7117, 154, 322, -924, 14682, -7348, 22197, 46445, 35232, 4859, 1041, 372, 360, 827, 14393, -5938, 16000, -10970, 24862, -21878, 118358, 14011, 21732, 8856, -1373, 15333, 3832, 2095, -91, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00032682024175301194, 0.0002687291125766933, 0.00016947560652624816, 0.00030178201268427074, 0.00012929510558024049, 0.0001053248270181939, 0.00086491979891434312, 0.00025393874966539443, 0.00021791942708659917, 0.00016282692376989871, 0.00010446709347888827, 0.00017918790399562567, 0.00039051767089404166, 0.00020263773330952972, 0.00010793624824145809, 0.0010290368227288127, 0.00021373240451794118, 0.00024828643654473126, 7.9151795944198966e-05, 0.00016665733710397035, 0.00025491364067420363, 0.00032839705818332732, 0.00025671065668575466, 0.0001472073927288875, 0.00014392842422239482, 0.00016229227185249329, 0.00057388452114537358, 0.00010231550550088286, 0.00013281515566632152, 0.00077277334639802575, 9.0922309027519077e-05, 0.00027160547324456275, 0.0008925579022616148, 0.0002172576350858435, 0.0002100062120007351, 0.00014673016266897321, 0.00035883369855582714, 0.00010971061419695616, 0.00028399270377121866, 2.0113386199227534e-05, 0.00023994338698685169, 6.1934668337926269e-05, 0.00018185617227572948, 0.00019423563207965344, 0.00014610624930355698, 0.00010740224388428032, 0.00014542245480697602, 0.00011501261906232685, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 3,-2,20,113,5,80,-2,28,19,9,8,7,-11,-9,-45,9,-3,8,-20,-107,-7,-24,127,-8,-4,11,-6,7,-6,4,15,97,22,26,38,-24,1,32,-4,5,17,-72,-7,-10,19,1,-8,-11, 127,9,15,-127,29,85,11,11,127,127,7,43,-54,-24,6,10,127,-56,-55,-50,-101,25,-107,16,15,76,-32,-86,22,20,7,-121,6,-63,127,11,-41,-48,-8,121,-80,-104,-30,4,-31,-10,-127,23, -28,-3,7,17,1,63,4,18,29,9,-16,31,-16,-4,16,6,-105,28,-1,84,-31,-13,-17,-4,-5,-57,-3,27,-18,3,2,-22,7,-26,17,-17,0,47,37,-11,50,34,-16,11,-42,4,-3,-6, 
  /* [0][1][][] */ 120,9,1,-98,15,-29,34,-16,10,9,-14,53,-7,-2,16,-32,0,-50,-56,-80,10,-76,-122,-18,4,103,-15,-127,-9,32,12,-104,20,-54,-5,127,-3,56,-41,44,-63,-127,40,-90,-44,-14,-15,-6, 27,-127,-127,115,-127,-127,-127,-127,-127,-94,127,-127,127,127,34,-127,-85,127,127,-106,127,127,111,127,127,-127,-127,27,-127,-127,93,127,-127,127,-30,-40,127,-127,127,127,127,-83,127,127,127,-122,97,107, 55,5,48,-13,7,-62,43,18,-23,15,-106,-8,0,-41,127,5,63,-66,-67,88,14,-48,11,-31,1,9,-37,67,19,37,0,3,33,-46,7,67,-4,63,67,-9,-83,4,-85,-33,29,-16,-14,5, 
  /* [0][2][][] */ -53,-5,26,-16,8,30,-38,23,8,-23,11,33,7,-7,-41,18,4,21,-13,113,5,-34,-16,-12,-4,25,0,51,-11,3,47,-28,-15,-44,-34,-36,0,29,8,-20,9,-9,43,-38,-34,19,-10,17, 67,125,76,21,17,-22,123,36,18,-2,43,27,-6,-1,-90,25,-59,-56,-35,125,-37,48,12,20,31,-64,-41,29,76,0,127,24,88,-28,6,-33,-24,-18,-12,125,-28,-18,-40,44,23,-32,7,-127, -40,-4,6,-3,6,-6,-63,7,-19,-10,-41,-40,21,-9,-8,11,33,23,-10,-127,24,-12,5,-7,-6,11,-10,-55,-16,5,7,9,-19,86,-38,-19,-3,35,25,-60,4,3,-39,5,-40,127,-7,-2, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013889859430491924, 0.011420987546443939, 0.0072027132846415043, 0.012825735844671726, 0.0054950420744717121, 0.0044763050973415375, 0.036759089678525925, 0.010792396031320095, 0.0092615755274891853, 0.0069201439619064331, 0.0044398512691259384, 0.0076154856942594051, 0.016597000882029533, 0.0086121037602424622, 0.0045872903428971767, 0.043734066188335419, 0.0090836267918348312, 0.010552173480391502, 0.0033639511093497276, 0.0070829368196427822, 0.010833829641342163, 0.01395687460899353, 0.010910202749073505, 0.0062563139945268631, 0.0061169578693807125, 0.0068974215537309647, 0.024390092119574547, 0.0043484088964760303, 0.0056446441449224949, 0.032842867076396942, 0.0038641979917883873, 0.011543232016265392, 0.037933710962533951, 0.0092334495857357979, 0.0089252637699246407, 0.0062360316514968872, 0.015250431373715401, 0.004662700928747654, 0.012069689109921455, 0.00085481890710070729, 0.010197593830525875, 0.0026322233024984598, 0.0077288872562348843, 0.0082550141960382462, 0.0062095155008137226, 0.0045645954087376595, 0.0061804545111954212, 0.0048880362883210182, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 40610, 7058, 6502, 5376, 1014, 11831, -1625, -257, 752, 1798, 2884, 299, 1951, -561, 982, -1763, 4654, 10267, -227, 16698, 2982, 3561, 10254, -417, 2273, 3749, 24184, 8036, -91, -2104, 168, 1905, -1831, 11634, 2606, 6815, 7138, 4888, 21534, 1734, -1043, 2259, 969, 3605, 4350, 3277, -1426, 2316, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00010553423635428771, 0.00032727877260185778, 0.00024311836750712246, 0.00059616228099912405, 0.0021937002893537283, 0.00041758787119761109, 0.0011978456750512123, 0.0012540863826870918, 0.00074224866693839431, 0.00079721712972968817, 0.00080502720084041357, 0.00056425976799800992, 0.00056199805112555623, 0.00089043757179751992, 0.00056000711629167199, 0.0020760614424943924, 0.00034041082835756242, 0.00041400975896976888, 0.0026759658940136433, 0.00015549571253359318, 0.00039911144995130599, 0.00029504622216336429, 0.00037663569673895836, 0.0012280789669603109, 0.0005136183463037014, 0.00031026135548017919, 0.00016879770555533469, 0.00045305397361516953, 0.001087703974917531, 0.0012351842597126961, 0.0006070438539609313, 0.00043700798414647579, 0.0011319165350869298, 0.00019414715643506497, 0.00041652750223875046, 0.00027121315361000597, 0.00050420186016708612, 0.00028384893084876239, 0.00010988375288434327, 0.0026006342377513647, 0.0006453360547311604, 0.0011876685312017798, 0.00054147216724231839, 0.00044740646262653172, 0.00027817388763651252, 0.0003443900786805898, 0.0008428237633779645, 0.0011528044706210494, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 76,4,9,-8,127,-2,-13,-9, 
  /* [1][0][][] */ 2,2,2,127,5,-5,14,3, 
  /* [2][0][][] */ 38,-127,-19,46,-3,-110,93,29, 
  /* [3][0][][] */ 127,-20,-8,5,-12,-26,11,0, 
  /* [4][0][][] */ 27,-48,127,-14,12,-46,15,-57, 
  /* [5][0][][] */ 104,18,59,-8,127,78,3,9, 
  /* [6][0][][] */ -5,91,-26,127,-16,16,-67,-34, 
  /* [7][0][][] */ -4,127,-4,3,-1,-4,-4,-9, 
  /* [8][0][][] */ 127,26,-20,-10,-54,-9,3,-37, 
  /* [9][0][][] */ -127,16,11,19,30,2,3,3, 
  /* [10][0][][] */ -95,-12,6,127,-7,15,-29,-2, 
  /* [11][0][][] */ -127,14,17,-68,42,15,0,-67, 
  /* [12][0][][] */ 127,24,15,19,-39,0,-15,-26, 
  /* [13][0][][] */ 1,79,-127,-13,5,58,-54,62, 
  /* [14][0][][] */ -77,-27,-18,127,9,22,-33,-51, 
  /* [15][0][][] */ -4,127,7,-3,-3,-15,10,-41, 
  /* [16][0][][] */ -38,-127,-14,5,30,-102,120,-34, 
  /* [17][0][][] */ 35,127,-6,-17,0,63,-74,-27, 
  /* [18][0][][] */ -4,19,-127,2,17,58,-20,78, 
  /* [19][0][][] */ -62,16,33,-3,-127,3,32,44, 
  /* [20][0][][] */ -127,7,-12,15,36,-43,39,-12, 
  /* [21][0][][] */ -79,-52,-17,-19,-127,24,-15,-2, 
  /* [22][0][][] */ -127,-63,-36,-49,89,-42,25,97, 
  /* [23][0][][] */ -22,-30,2,-15,-8,77,-127,-73, 
  /* [24][0][][] */ -12,24,-127,-1,7,39,-11,77, 
  /* [25][0][][] */ 47,-28,-11,127,-55,-18,1,-39, 
  /* [26][0][][] */ -10,-29,-4,5,-20,117,127,-39, 
  /* [27][0][][] */ 62,-4,6,8,127,37,51,-20, 
  /* [28][0][][] */ 1,120,-52,11,18,92,-29,127, 
  /* [29][0][][] */ -8,5,1,-20,3,89,-127,-72, 
  /* [30][0][][] */ 5,-4,-5,-127,-7,-11,-7,-14, 
  /* [31][0][][] */ -49,8,8,11,-127,22,14,-13, 
  /* [32][0][][] */ -32,21,-13,-127,-23,44,-88,-96, 
  /* [33][0][][] */ -68,-32,-17,-8,-127,25,40,13, 
  /* [34][0][][] */ -127,82,-4,26,54,-51,-2,-11, 
  /* [35][0][][] */ -35,127,-14,-68,19,-100,88,-12, 
  /* [36][0][][] */ -25,87,20,-30,-37,103,-127,-46, 
  /* [37][0][][] */ 14,-127,-29,16,3,-124,112,-9, 
  /* [38][0][][] */ 18,-127,5,-3,3,41,-68,89, 
  /* [39][0][][] */ 8,-127,-14,-1,-8,-12,-57,-117, 
  /* [40][0][][] */ 125,46,-11,23,-37,95,-127,-99, 
  /* [41][0][][] */ 17,-127,27,7,-1,75,-61,99, 
  /* [42][0][][] */ 9,6,2,-127,-30,5,-13,-31, 
  /* [43][0][][] */ -76,-41,-16,-127,42,30,-29,-12, 
  /* [44][0][][] */ 18,2,-8,35,-31,127,126,-46, 
  /* [45][0][][] */ -127,-87,-10,-28,-36,26,41,52, 
  /* [46][0][][] */ 4,76,127,-8,-6,14,-8,22, 
  /* [47][0][][] */ -21,-18,5,127,23,17,3,12, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022490086848847568, 0.00069745403015986085, 0.00051810231525450945, 0.001270463690161705, 0.0046749291941523552, 0.00088990910444408655, 0.0025526932440698147, 0.0026725460775196552, 0.0015817839885130525, 0.0016989257419481874, 0.0017155695240944624, 0.0012024772586300969, 0.0011976573150604963, 0.0018975849961861968, 0.0011934144422411919, 0.0044242329895496368, 0.00072543940041214228, 0.00088228390086442232, 0.0057026711292564869, 0.00033137228456325829, 0.00085053453221917152, 0.0006287642172537744, 0.00080263713607564569, 0.0026171226054430008, 0.0010945567628368735, 0.00066118873655796051, 0.0003597197646740824, 0.00096548983128741384, 0.0023179736454039812, 0.0026322645135223866, 0.0012936530401930213, 0.00093129469314590096, 0.0024121936876326799, 0.0004137412179261446, 0.00088764936663210392, 0.00057797430781647563, 0.0010744895553216338, 0.00060490198666229844, 0.00023417000193148851, 0.0055421344004571438, 0.0013752564555034041, 0.0025310050696134567, 0.0011539151892066002, 0.00095345458248630166, 0.0005928081227466464, 0.00073391944169998169, 0.0017961167031899095, 0.002456707414239645, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -9692, -24045, 21684, 23672, 7753, 2306, 38418, 13733, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.001085093361325562, 0.00064314034534618258, 0.0010497968178242445, 0.0013084898237138987, 0.0010884220246225595, 0.001178383594378829, 0.00079583533806726336, 0.00054706993978470564, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,3,13,-97,14,32,6,7,-2,7,2,-12,104,0,0,7,0,-18,-8,-4,86,-3,-1,10,34,43,19,-1,5,3,3,-127,14,11,-1,-1,-21,-5,-13,29,6,-31,-16,1,-1,9,8,4, 
  /* [1][0][][] */ -52,-9,-3,-11,48,25,-44,77,14,10,-28,-23,12,0,18,46,0,37,20,-43,-1,20,127,31,-26,10,56,13,24,-12,13,-15,16,-10,-20,-12,4,-74,24,5,-13,-10,-83,-1,-51,10,-50,-78, 
  /* [2][0][][] */ -53,2,0,8,38,6,25,35,-16,60,2,-4,14,0,4,58,0,11,-127,19,-3,13,13,-12,-25,8,45,12,8,24,25,11,-3,-6,-18,-18,2,-6,9,11,35,-11,-31,11,29,-52,30,5, 
  /* [3][0][][] */ -1,3,-11,3,-8,25,1,-1,68,13,-1,-6,29,0,-29,2,0,7,-6,-10,-9,1,2,-20,-20,8,-14,-7,-18,-4,-4,-8,-42,33,-54,-3,5,0,4,-127,-3,-6,-2,-47,-9,-5,-3,3, 
  /* [4][0][][] */ -6,-11,73,33,5,-8,4,8,5,-1,-10,-4,-77,0,-11,8,0,9,4,3,65,6,-3,-6,-13,18,-8,49,-14,-5,-1,90,-3,4,2,-5,6,-11,-11,-19,-2,-127,8,-9,1,0,-5,-1, 
  /* [5][0][][] */ -6,42,3,-7,-7,49,32,11,-16,28,3,54,24,0,-127,-10,0,12,-39,21,-15,9,-15,35,-15,1,24,5,-17,24,18,-17,53,32,-42,0,0,22,-43,17,29,-10,-8,35,25,50,30,21, 
  /* [6][0][][] */ -22,-65,-2,9,40,-49,-18,2,38,-22,-8,96,-1,0,-127,51,0,-14,44,-22,-10,5,28,-33,25,-9,-7,-4,50,-10,-3,3,94,-43,32,-3,1,-22,-78,-21,-19,-19,-3,-36,-26,-74,-21,-27, 
  /* [7][0][][] */ -116,-27,-9,4,127,27,66,25,19,7,20,-30,-23,0,93,114,0,2,10,60,-15,0,-39,45,24,-5,39,22,44,65,59,-6,-11,-21,-20,-16,-1,6,22,38,74,1,-21,-12,64,3,72,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.04611646756529808, 0.027333464473485947, 0.044616363942623138, 0.055610816925764084, 0.046257935464382172, 0.050081301480531693, 0.033823002129793167, 0.02325047180056572, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 45819, 54086, 59801, 43010, 500, 12951, 3330, 30260, 25045, 16724, 25564, 11986, -44245, -127, 31995, 1076, -204, 28989, 4415, -1395, -15025, -8056, 52172, 28138, -16173, 41695, 38442, 18580, -2550, 11477, -5788, -50348, 10230, 80386, 31389, 2735, 62345, 413, 130127, -23792, 14123, -26713, 3072, 86538, -957, 60779, 932, -23342, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00013167383440304548, 7.2301736508961767e-05, 0.00014292301784735173, 0.00013164327538106591, 0.00019364891340956092, 0.00018723793618846685, 0.00018491876835469157, 4.7988549340516329e-05, 9.0723413450177759e-05, 3.6228058888809755e-05, 7.0252084697131068e-05, 2.4880409910110757e-05, 0.00016167563444469124, 0.005541567225009203, 8.210736996261403e-05, 0.00031264123390428722, 0.0027484172023832798, 1.9433635316090658e-05, 8.356277976417914e-05, 0.00021146133076399565, 0.00010908071271842346, 0.00012896275438833982, 0.0001097922504413873, 3.8122925616335124e-05, 8.4198611148167402e-05, 6.3545703596901149e-05, 3.170214404235594e-05, 3.7648678699042648e-05, 0.00020218422287143767, 7.4095172749366611e-05, 5.753626101068221e-05, 0.00018517929129302502, 0.00023227742349263281, 1.033901844493812e-05, 8.1932077591773123e-05, 0.00010862192721106112, 1.1399088180041872e-05, 0.00055012799566611648, 3.5355966247152537e-05, 8.2162259786855429e-05, 7.6088595960754901e-05, 0.00019280798733234406, 0.00011835612531285733, 1.042022995534353e-05, 0.00013516651233658195, 9.3628739705309272e-05, 0.00019365330808795989, 8.6886255303397775e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -41,-25,-6,-18,6,-39,-77,-68,-23,-51,11,63,33,-71,114,-44,-113,-85,39,-3,0,-69,-114,-82,-34,-127,-63,-24,70,18,96,27,-127,-91,-5,53,16,47,-127,81,-77,-14,105,-113,-3,-36,-87,110, 76,7,-28,-28,55,-127,-127,-83,59,-75,-116,105,37,-82,-1,63,-52,-114,62,10,9,-112,-127,-72,-3,-125,-120,-44,-55,26,-59,55,29,-127,65,82,10,72,-92,127,-127,5,126,-127,2,-24,-127,97, -32,40,5,-5,-66,-108,-59,-18,85,-7,-127,37,5,-71,-101,-12,-127,-29,27,14,-18,-74,-35,-22,-13,-30,-55,-15,-11,21,-24,10,106,-89,73,29,12,35,-7,18,-78,4,5,-78,-16,5,-56,14, 
  /* [0][1][][] */ -85,-127,-44,-45,-11,55,99,-104,-25,-107,-16,116,90,-64,28,-97,-121,-92,88,-75,43,-87,-102,-127,43,-123,-74,-37,127,-61,127,84,-43,-88,-12,85,-38,-78,-102,91,43,60,104,-109,-91,-118,82,119, 127,-83,-127,-127,127,41,92,-127,97,-127,-108,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-118,-120,127,-99,-127,-127,-120,-127,-73,127,29,-112,127,127,-71,-127,-92,89,62,127,127,-118,-112,-127,124,127, -53,28,-61,-86,-119,-22,30,-40,127,-22,-74,37,54,-70,-26,-45,-37,-29,55,-71,56,-81,-40,-25,46,-13,-48,-63,15,-91,-38,21,29,-95,119,22,-39,-62,3,-13,37,55,7,-73,-57,-38,64,34, 
  /* [0][2][][] */ -60,-108,-31,-37,0,35,-5,-32,-36,-56,-13,68,77,-127,-127,-64,-43,-14,60,79,53,-31,-16,-56,30,-51,-13,-62,74,34,78,62,108,-28,-37,-12,-93,32,-16,30,9,36,11,-55,96,-77,3,30, 88,-73,-83,-88,81,18,6,-45,47,-68,-29,62,83,-26,15,93,-24,-28,78,121,81,-51,-22,-58,91,-67,-21,-100,-52,45,-50,110,-18,-50,67,5,-127,48,-13,-2,11,31,14,-62,127,-100,-12,40, -27,26,-38,-38,-80,-19,22,-13,60,-5,-11,38,30,-43,109,-29,-93,-5,30,61,74,-26,-3,-3,39,-3,-3,-64,-16,32,-22,38,-92,-40,67,3,-21,21,29,-39,7,35,-3,-13,62,-34,-4,20, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0055961376056075096, 0.0030728238634765148, 0.006074228323996067, 0.0055948393419384956, 0.0082300789654254913, 0.0079576121643185616, 0.0078590475022792816, 0.0020395133178681135, 0.0038557448424398899, 0.0015396925155073404, 0.0029857135377824306, 0.0010574173647910357, 0.0068712141364812851, 0.23551659286022186, 0.0034895632416009903, 0.013287252746522427, 0.1168077290058136, 0.00082592945545911789, 0.0035514179617166519, 0.0089871063828468323, 0.004635930061340332, 0.0054809167049825191, 0.0046661705709993839, 0.0016202243277803063, 0.003578440984711051, 0.0027006922755390406, 0.0013473411090672016, 0.0016000688774511218, 0.0085928291082382202, 0.0031490449327975512, 0.0024452910292893648, 0.007870119996368885, 0.0098717901855707169, 0.00043940829345956445, 0.0034821133594959974, 0.0046164318919181824, 0.00048446122673340142, 0.023380439728498459, 0.0015026285545900464, 0.0034918959718197584, 0.0032337652519345284, 0.0081943394616246223, 0.0050301351584494114, 0.00044285977492108941, 0.0057445764541625977, 0.0039792214520275593, 0.0082302652299404144, 0.0036926658358424902, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3487, 34, 7381, 6524, 5522, 6116, 7906, -19, -24, -295, 2419, 448, 10271, -68666560, 2486, 13693, -55431212, -86, -404, 7724, 3109, -18, 47, 402, 3067, -557, 46, 610, 3267, 1355, 2339, 13191, 2900, 230, 160, -1636, 275, 2072, -120, 8464, 1768, 7908, -275, -75, 7639, 132, 9168, 3538, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00058970594545826316, 0.00067505991319194436, 0.00041955048800446093, 0.00029658988933078945, 0.00036656417069025338, 0.00033751843147911131, 0.00047961677773855627, 0.0019902670755982399, 0.00053649320034310222, 0.0025690637994557619, 0.00061215163441374898, 0.0018903235904872417, 0.00021162604389246553, 2.3619015632192486e-09, 0.0010858476161956787, 0.00023968004097696394, 2.3619015632192486e-09, 0.0080656567588448524, 0.00052227795822545886, 0.00050224887672811747, 0.0003481706662569195, 0.0060502891428768635, 0.00049154087901115417, 0.0016731293871998787, 0.0012067956849932671, 0.0008495394722558558, 0.0032710123341530561, 0.002072750823572278, 0.00031286102603189647, 0.0021266834810376167, 0.0012299838708713651, 0.00017618040146771818, 0.00025621207896620035, 0.01372914295643568, 0.00075390742858871818, 0.00068454875145107508, 0.0055797342211008072, 0.00059055251767858863, 0.0032378279138356447, 0.00040974473813548684, 0.0016439252067357302, 0.00027335758204571903, 0.00059911177959293127, 0.01227158959954977, 0.00064415531232953072, 0.00052947900258004665, 0.00031274283537641168, 0.00025253961212001741, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 14,-127,79,-45,43,-27,-49,17, 
  /* [1][0][][] */ 82,73,-17,-90,3,16,-66,127, 
  /* [2][0][][] */ 31,4,-42,115,39,127,55,80, 
  /* [3][0][][] */ 81,73,-66,127,-93,-10,-8,16, 
  /* [4][0][][] */ -28,-95,80,19,1,19,-21,-127, 
  /* [5][0][][] */ 15,-6,-40,53,1,-28,42,127, 
  /* [6][0][][] */ 74,-25,-127,-80,100,0,56,-39, 
  /* [7][0][][] */ 127,15,10,-21,29,0,88,-58, 
  /* [8][0][][] */ 16,-100,6,122,-2,8,-8,-127, 
  /* [9][0][][] */ 127,-127,9,-6,-13,23,-94,97, 
  /* [10][0][][] */ -113,-93,-127,20,1,-4,-113,87, 
  /* [11][0][][] */ -26,-64,-7,-121,-127,-21,70,-15, 
  /* [12][0][][] */ 7,0,-43,68,-62,-35,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -12,-32,-2,19,44,127,41,36, 
  /* [15][0][][] */ 41,18,27,-127,51,58,-61,58, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 25,20,127,19,-36,-14,15,20, 
  /* [18][0][][] */ 78,-127,24,27,-10,20,-90,14, 
  /* [19][0][][] */ -127,-28,27,42,-74,-23,-82,74, 
  /* [20][0][][] */ 33,25,-36,95,-36,-127,-1,50, 
  /* [21][0][][] */ 54,23,127,7,-21,-11,75,16, 
  /* [22][0][][] */ -63,-25,-127,-3,7,14,-78,4, 
  /* [23][0][][] */ -93,118,-10,-29,2,7,127,-86, 
  /* [24][0][][] */ 10,-50,-46,83,-8,-68,91,127, 
  /* [25][0][][] */ 9,31,16,20,127,123,-55,-48, 
  /* [26][0][][] */ -63,-30,-127,0,2,20,-75,-1, 
  /* [27][0][][] */ 18,-18,-25,22,-49,127,56,37, 
  /* [28][0][][] */ -5,-27,-30,49,32,127,70,77, 
  /* [29][0][][] */ 78,40,127,-11,-32,-36,81,-25, 
  /* [30][0][][] */ -84,127,-34,-54,9,-15,106,-37, 
  /* [31][0][][] */ -53,-121,-36,-1,24,-77,127,108, 
  /* [32][0][][] */ -2,14,-27,127,-13,91,65,120, 
  /* [33][0][][] */ 1,54,-14,-98,2,-19,-6,127, 
  /* [34][0][][] */ -8,61,-9,-93,47,-18,1,127, 
  /* [35][0][][] */ 127,-21,-47,-36,19,83,123,-42, 
  /* [36][0][][] */ -114,-10,23,60,-51,-10,-127,79, 
  /* [37][0][][] */ -11,-12,-2,3,23,127,46,25, 
  /* [38][0][][] */ -2,8,2,75,127,-14,-19,32, 
  /* [39][0][][] */ -8,26,33,-127,26,5,-23,120, 
  /* [40][0][][] */ 106,20,127,18,-9,-8,87,-8, 
  /* [41][0][][] */ -3,-27,-23,59,27,127,65,78, 
  /* [42][0][][] */ -92,-4,127,14,-39,20,-34,63, 
  /* [43][0][][] */ -10,-64,-3,117,-30,5,23,-127, 
  /* [44][0][][] */ 68,-14,-93,-127,76,-31,-9,-82, 
  /* [45][0][][] */ -87,127,1,-54,5,-6,100,-53, 
  /* [46][0][][] */ -127,-35,65,48,-22,58,-117,77, 
  /* [47][0][][] */ 87,40,127,-9,22,-28,124,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00098296941723674536, 0.0011252443073317409, 0.00069934059865772724, 0.00049437995767220855, 0.00061101873870939016, 0.00056260294513776898, 0.00079946394544094801, 0.0033175377175211906, 0.00089427019702270627, 0.0042823227122426033, 0.0010203837882727385, 0.0031509438995271921, 0.00035275536356493831, 3.937008052901092e-09, 0.0018099783919751644, 0.00039951803046278656, 3.937008052901092e-09, 0.013444487936794758, 0.00087057502241805196, 0.00083718897076323628, 0.00058035895926877856, 0.010085110552608967, 0.0008193399989977479, 0.0027889071498066187, 0.0020115843508392572, 0.0014160809805616736, 0.0054523875005543232, 0.0034550281707197428, 0.00052150199189782143, 0.0035449275746941566, 0.0020502363331615925, 0.00029367170645855367, 0.00042707499233074486, 0.022884843870997429, 0.0012566737132146955, 0.0011410610750317574, 0.0093007516115903854, 0.00098438060376793146, 0.0053970729932188988, 0.00068299559643492103, 0.0027402271516621113, 0.0004556544590741396, 0.00099864788353443146, 0.020455276593565941, 0.0010737300617620349, 0.00088257831521332264, 0.00052130501717329025, 0.00042095340904779732, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -3296, -43486, -8506, -14152, -30003, -3092, -22635, -27559, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021182410418987274, 0.0022427884396165609, 0.0022692307829856873, 0.0012503996258601546, 0.0013479478657245636, 0.0024004157166928053, 0.0015000271378085017, 0.001084228977560997, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,3,-4,127,1,2,4,0,-113,-86,-6,0,113,-1,0, 
  /* [1][0][][] */ 0,-32,-5,90,71,10,22,20,1,-5,127,-47,0,33,-18,0, 
  /* [2][0][][] */ 0,0,-4,-11,-57,11,13,-6,0,12,-17,-2,0,127,-9,0, 
  /* [3][0][][] */ 0,-9,-18,-127,86,28,62,24,0,69,0,42,0,-1,10,0, 
  /* [4][0][][] */ 0,44,-16,32,-58,32,127,1,-1,-66,18,-12,0,-13,16,0, 
  /* [5][0][][] */ 0,-15,-3,0,-22,-25,-13,12,-1,9,1,-36,0,-5,127,0, 
  /* [6][0][][] */ 0,8,3,-2,45,-22,-32,0,0,-112,126,69,0,127,54,0, 
  /* [7][0][][] */ 0,23,-7,127,0,-5,16,10,1,67,-55,71,0,-6,43,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090025238692760468, 0.095318503677845001, 0.09644230455160141, 0.053141985088586807, 0.057287782430648804, 0.10201766341924667, 0.063751153647899628, 0.046079728752374649, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 25536, 114778, 9634, 11050, 57120, 13149, 61386, -8878, 5882, 29145, 14329, -445, 24464, 8561, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00010169503366341814, 3.5305522033013403e-05, 0.00035430450225248933, 0.00017572646902408451, 5.8789493778022006e-05, 0.00036113074747845531, 6.376773671945557e-05, 2.2949574486119673e-05, 0.00031861552270129323, 0.00020308498642407358, 0.00073218636680394411, 0.00072724185883998871, 0.00028668314917013049, 0.00021729325817432255, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-126,38,-68,80,-77,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,51,-105,6,127,-25, 24,-24,90,-2,-73,64,-93,73,-95,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-45,13,-27,11,-27,0,3,-109,-49,8,-29,-14, -78,-42,-57,-14,-8,-28,9,-30,-107,-89,21,-13,-104,-127,1,23, 14,1,65,2,2,31,-24,30,-127,6,-2,1,-21,12,-3,43, 
  /* [0][2][][] */ -115,-73,68,2,-7,36,-38,48,-77,0,0,4,40,2,-26,23, 23,-4,31,-2,-28,37,-33,17,-124,-13,0,84,-58,0,-28,-111, 21,-7,19,0,3,12,10,19,-115,4,0,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0043220389634370804, 0.0015004846500232816, 0.015057940967381001, 0.0074683749116957188, 0.002498553367331624, 0.015348056331276894, 0.0027101289015263319, 0.00097535690292716026, 0.013541159220039845, 0.0086311120539903641, 0.031117919832468033, 0.030907778069376945, 0.01218403410166502, 0.009234962984919548, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 15739, -90495, 9543, 126987, 13310, 27845, 8722, 275285, 14037, 15503, 315713, -1073741824, 20822, 45297, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00029867023113183677, 0.00023459790099877864, 4.991362220607698e-05, 2.2134499886306003e-05, 0.00023449772561434656, 0.00011040051322197542, 0.00059313193196430802, 6.9194807110761758e-06, 7.1949543780647218e-05, 0.00019837015133816749, 1.8374372302787378e-05, 1.1533876076441629e-09, 0.00018340272072236985, 4.5394506742013618e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 42,1,32, -14,-25,13, -127,-111,-61, 
  /* [1][1][][] */ -1,1,3, -29,2,-3, -5,-25,9, 
  /* [1][2][][] */ -5,23,4, -10,9,0, 36,-10,17, 
  /* [2][0][][] */ 22,-3,3, 66,113,10, 37,-33,17, 
  /* [2][1][][] */ 2,17,10, 60,127,-16, 20,2,6, 
  /* [2][2][][] */ 48,-56,33, 74,-34,-7, 36,-42,29, 
  /* [3][0][][] */ 16,42,22, 38,99,29, -3,0,-16, 
  /* [3][1][][] */ 28,41,26, 70,127,35, -19,-25,-6, 
  /* [3][2][][] */ 13,-1,15, 32,20,10, -2,-6,-9, 
  /* [4][0][][] */ -1,50,-15, -13,59,-33, -19,28,-5, 
  /* [4][1][][] */ 17,95,53, 8,110,12, 20,71,-17, 
  /* [4][2][][] */ 27,110,56, 9,127,16, -37,40,22, 
  /* [5][0][][] */ 7,-12,-109, -2,-14,-88, -7,7,-18, 
  /* [5][1][][] */ 13,-54,-127, 9,-57,-107, 5,-4,-25, 
  /* [5][2][][] */ 10,-5,-39, 16,-16,-27, 12,-4,-24, 
  /* [6][0][][] */ 27,-59,44, 48,-85,49, 11,-16,14, 
  /* [6][1][][] */ 38,-92,71, 61,-127,80, 6,-26,22, 
  /* [6][2][][] */ 20,-35,16, 12,-46,28, -15,6,-1, 
  /* [7][0][][] */ -37,33,19, -116,-28,18, -25,38,17, 
  /* [7][1][][] */ -9,8,19, -127,-89,8, 1,6,19, 
  /* [7][2][][] */ -24,47,6, -16,22,14, -29,33,7, 
  /* [8][0][][] */ -105,-69,-122, -89,-70,-127, -59,-66,-126, 
  /* [8][1][][] */ -95,-65,-117, -79,-65,-123, -48,-61,-122, 
  /* [8][2][][] */ -80,-57,-104, -63,-56,-110, -29,-49,-105, 
  /* [9][0][][] */ 0,6,17, 8,7,12, 14,9,-1, 
  /* [9][1][][] */ 91,109,-10, 73,127,23, -8,21,33, 
  /* [9][2][][] */ -41,-34,5, -11,-39,-9, 0,-2,-26, 
  /* [10][0][][] */ -26,-82,-17, 33,95,21, -9,-12,-1, 
  /* [10][1][][] */ -60,-102,-13, 77,127,15, -18,-25,1, 
  /* [10][2][][] */ -32,-19,3, 35,23,-10, -9,0,8, 
  /* [11][0][][] */ -6,-32,-8, 15,-48,-1, 15,-96,-50, 
  /* [11][1][][] */ -28,-44,-21, -17,-62,-37, -3,-56,-49, 
  /* [11][2][][] */ -2,-25,-62, 112,127,69, -31,22,-34, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -62,-111,-24, -10,-18,-5, 
  /* [13][1][][] */ 61,114,16, 57,127,26, 7,15,11, 
  /* [13][2][][] */ -8,-19,5, 1,-18,0, 0,4,-3, 
  /* [14][0][][] */ 41,-11,-38, 77,-30,-49, 33,-13,-21, 
  /* [14][1][][] */ 86,-22,-74, 127,-46,-91, 59,-26,-43, 
  /* [14][2][][] */ 61,-12,-45, 79,-26,-55, 32,-11,-21, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.435322355471726e-07, 0.078310608863830566, 0.061511002480983734, 0.013087230734527111, 0.0058036120608448982, 0.061484735459089279, 0.028946748003363609, 0.15551775693893433, 0.0018142710905522108, 0.018864996731281281, 0.052012175321578979, 0.0048177158460021019, 3.0241542958719947e-07, 0.048087749630212784, 0.011902329511940479, 3.2600983246311444e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.59992295503616333, } };
const TfArray<1, int> quant46_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.46924778819084167, } };
const TfArray<1, int> quant50_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.48057621717453003, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.61261045932769775, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.29353255033493042, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.25279846787452698, } };
const TfArray<1, int> quant61_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30173519253730774, } };
const TfArray<1, int> quant62_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.31381404399871826, } };
const TfArray<1, int> quant65_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.39843899011611938, } };
const TfArray<1, int> quant66_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.07107970118522644, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.16217857599258423, } };
const TfArray<1, int> quant69_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_106_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_106_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_106_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_106_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_106_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
